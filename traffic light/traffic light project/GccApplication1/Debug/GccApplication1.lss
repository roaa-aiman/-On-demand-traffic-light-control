
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000f60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aae  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c8  00000000  00000000  00002bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000129a  00000000  00000000  000035c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  0000485c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006be  00000000  00000000  00004b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c1  00000000  00000000  000051c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	b3 01       	movw	r22, r6
  56:	ba 01       	movw	r22, r20
  58:	c1 01       	movw	r24, r2
  5a:	c8 01       	movw	r24, r16
  5c:	cf 01       	movw	r24, r30
  5e:	d6 01       	movw	r26, r12
  60:	dd 01       	movw	r26, r26
  62:	e4 01       	movw	r28, r8
  64:	f6 01       	movw	r30, r12
  66:	fd 01       	movw	r30, r26
  68:	04 02       	muls	r16, r20
  6a:	0b 02       	muls	r16, r27
  6c:	12 02       	muls	r17, r18
  6e:	19 02       	muls	r17, r25
  70:	20 02       	muls	r18, r16
  72:	27 02       	muls	r18, r23
  74:	3a 02       	muls	r19, r26
  76:	40 02       	muls	r20, r16
  78:	46 02       	muls	r20, r22
  7a:	4c 02       	muls	r20, r28
  7c:	52 02       	muls	r21, r18
  7e:	58 02       	muls	r21, r24
  80:	5e 02       	muls	r21, r30
  82:	64 02       	muls	r22, r20
  84:	76 02       	muls	r23, r22
  86:	7c 02       	muls	r23, r28
  88:	82 02       	muls	r24, r18
  8a:	88 02       	muls	r24, r24
  8c:	8e 02       	muls	r24, r30
  8e:	94 02       	muls	r25, r20
  90:	9a 02       	muls	r25, r26
  92:	a0 02       	muls	r26, r16
  94:	b2 02       	muls	r27, r18
  96:	b8 02       	muls	r27, r24
  98:	be 02       	muls	r27, r30
  9a:	c4 02       	muls	r28, r20
  9c:	ca 02       	muls	r28, r26
  9e:	d0 02       	muls	r29, r16
  a0:	d6 02       	muls	r29, r22
  a2:	dc 02       	muls	r29, r28
  a4:	ee 02       	muls	r30, r30
  a6:	f3 02       	muls	r31, r19
  a8:	f8 02       	muls	r31, r24
  aa:	fd 02       	muls	r31, r29
  ac:	02 03       	mulsu	r16, r18
  ae:	07 03       	mulsu	r16, r23
  b0:	0c 03       	fmul	r16, r20
  b2:	11 03       	mulsu	r17, r17

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 36       	cpi	r26, 0x63	; 99
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 18 03 	call	0x630	; 0x630 <main>
  d4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <APP_INT>:
u8 car_yellow_flag = 0 ;

void APP_INT (void)
{
	// car leds initialization
	H_LED_void_Init( LED_CAR_PORT , H_LED_LEDID_LED0);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 30 02 	call	0x460	; 0x460 <H_LED_void_Init>
	H_LED_void_Init( LED_CAR_PORT , H_LED_LEDID_LED1);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 30 02 	call	0x460	; 0x460 <H_LED_void_Init>
	H_LED_void_Init( LED_CAR_PORT, H_LED_LEDID_LED2);
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 30 02 	call	0x460	; 0x460 <H_LED_void_Init>
	// pedestrian leds initialization
	H_LED_void_Init( LED_PED_PORT , H_LED_LEDID_LED0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 30 02 	call	0x460	; 0x460 <H_LED_void_Init>
	H_LED_void_Init( LED_PED_PORT , H_LED_LEDID_LED1);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 30 02 	call	0x460	; 0x460 <H_LED_void_Init>
	H_LED_void_Init( LED_PED_PORT , H_LED_LEDID_LED2);
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 30 02 	call	0x460	; 0x460 <H_LED_void_Init>
	
	//INTRUPT INTIALIZATION
	M_EXTI_voidInt0Init();
 10c:	0e 94 80 04 	call	0x900	; 0x900 <M_EXTI_voidInt0Init>
	GIE_voidEnable();
 110:	0e 94 8b 04 	call	0x916	; 0x916 <GIE_voidEnable>
	
	//BUTTON LED INTIALIZATION
	H_BTN_void_Init( H_BTN_BTNID_BTN2) ;
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 aa 01 	call	0x354	; 0x354 <H_BTN_void_Init>
	H_BTN_u8_SetBtnVal( H_BTN_BTNID_BTN2);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 ed 01 	call	0x3da	; 0x3da <H_BTN_u8_SetBtnVal>
	
	//TIMER INTIALIZATION
	MTIMER0_voidInitialize();
 120:	0e 94 8f 04 	call	0x91e	; 0x91e <MTIMER0_voidInitialize>
 124:	08 95       	ret

00000126 <APP_start>:
}

void APP_start(void)
{
 126:	cf 93       	push	r28

	car_green_flag = 1;
 128:	c1 e0       	ldi	r28, 0x01	; 1
 12a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <car_green_flag>
	H_LED_void_TurnOn(LED_CAR_PORT , H_LED_LEDID_LED0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
	MTIMER0_delay(5);
 136:	65 e0       	ldi	r22, 0x05	; 5
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	car_green_flag = 0;
 14a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <car_green_flag>

	car_yellow_flag = 1 ;
 14e:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	for (u8 i=0 ; i <= 4 ; i++)
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	0b c0       	rjmp	.+22     	; 0x16c <APP_start+0x46>
	{
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <H_LED_void_Toggle>
		MTIMER0_delay(1);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
	MTIMER0_delay(5);
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED0);
	car_green_flag = 0;

	car_yellow_flag = 1 ;
	for (u8 i=0 ; i <= 4 ; i++)
 16a:	cf 5f       	subi	r28, 0xFF	; 255
 16c:	c5 30       	cpi	r28, 0x05	; 5
 16e:	98 f3       	brcs	.-26     	; 0x156 <APP_start+0x30>
	{
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
		MTIMER0_delay(1);
	
	}
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED1);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	car_yellow_flag = 0 ;
 178:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

	car_red_flag = 1 ;
 17c:	c1 e0       	ldi	r28, 0x01	; 1
 17e:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <car_red_flag>
	H_LED_void_TurnOn(LED_CAR_PORT , H_LED_LEDID_LED2);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
	MTIMER0_delay(5);
 18a:	65 e0       	ldi	r22, 0x05	; 5
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED2);
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	car_red_flag = 0 ;
 19e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <car_red_flag>
	
	car_yellow_flag = 1 ;
 1a2:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	for (u8 i=0 ; i <= 4; i++)
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	0b c0       	rjmp	.+22     	; 0x1c0 <APP_start+0x9a>
	{
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <H_LED_void_Toggle>
		MTIMER0_delay(1);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
	MTIMER0_delay(5);
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED2);
	car_red_flag = 0 ;
	
	car_yellow_flag = 1 ;
	for (u8 i=0 ; i <= 4; i++)
 1be:	cf 5f       	subi	r28, 0xFF	; 255
 1c0:	c5 30       	cpi	r28, 0x05	; 5
 1c2:	98 f3       	brcs	.-26     	; 0x1aa <APP_start+0x84>
	{
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
		MTIMER0_delay(1);
	}
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED1);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	car_yellow_flag = 0 ;
 1cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <__vector_1>:


ISR (INT0_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	cf 93       	push	r28
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	
	if (car_red_flag == 1)
 1f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <car_red_flag>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	71 f4       	brne	.+28     	; 0x21c <__vector_1+0x48>
	{


		H_LED_void_TurnOn(LED_PED_PORT , H_LED_LEDID_LED0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
		H_LED_void_TurnOn(LED_CAR_PORT , H_LED_LEDID_LED2);
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
		MTIMER0_delay(5);
 20e:	65 e0       	ldi	r22, 0x05	; 5
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
 21a:	45 c0       	rjmp	.+138    	; 0x2a6 <__vector_1+0xd2>
		
		
	}
	
	else if (car_green_flag == 1 || car_yellow_flag == 1 )
 21c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <car_green_flag>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	21 f0       	breq	.+8      	; 0x22c <__vector_1+0x58>
 224:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	e9 f5       	brne	.+122    	; 0x2a6 <__vector_1+0xd2>
	{
		H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED0);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
		H_LED_void_TurnOn(LED_PED_PORT , H_LED_LEDID_LED2);
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
		
		H_LED_void_TurnOff (LED_CAR_PORT , H_LED_LEDID_LED1);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
		
		for (u8 i=0 ; i <= 4 ; i++)
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	0f c0       	rjmp	.+30     	; 0x266 <__vector_1+0x92>
	{
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <H_LED_void_Toggle>
		H_LED_void_Toggle (LED_PED_PORT , H_LED_LEDID_LED1);
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <H_LED_void_Toggle>
		MTIMER0_delay(1);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
		H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED0);
		H_LED_void_TurnOn(LED_PED_PORT , H_LED_LEDID_LED2);
		
		H_LED_void_TurnOff (LED_CAR_PORT , H_LED_LEDID_LED1);
		
		for (u8 i=0 ; i <= 4 ; i++)
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	c5 30       	cpi	r28, 0x05	; 5
 268:	78 f3       	brcs	.-34     	; 0x248 <__vector_1+0x74>
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
		H_LED_void_Toggle (LED_PED_PORT , H_LED_LEDID_LED1);
		MTIMER0_delay(1);
	
	}
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED1);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	H_LED_void_TurnOff(LED_PED_PORT, H_LED_LEDID_LED1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	
		H_LED_void_TurnOff(LED_PED_PORT , H_LED_LEDID_LED2);
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
		H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED0);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
		
		H_LED_void_TurnOn(LED_PED_PORT , H_LED_LEDID_LED0);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
		H_LED_void_TurnOn(LED_CAR_PORT , H_LED_LEDID_LED2);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
		MTIMER0_delay(5);
 29a:	65 e0       	ldi	r22, 0x05	; 5
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
		
	}
	
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED2);
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	
	for (u8 i=0 ; i <= 4 ; i++)
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <__vector_1+0xfc>
	{
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <H_LED_void_Toggle>
		H_LED_void_Toggle (LED_PED_PORT , H_LED_LEDID_LED1);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <H_LED_void_Toggle>
		MTIMER0_delay(1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
		
	}
	
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED2);
	
	for (u8 i=0 ; i <= 4 ; i++)
 2ce:	cf 5f       	subi	r28, 0xFF	; 255
 2d0:	c5 30       	cpi	r28, 0x05	; 5
 2d2:	78 f3       	brcs	.-34     	; 0x2b2 <__vector_1+0xde>
		H_LED_void_Toggle (LED_CAR_PORT , H_LED_LEDID_LED1);
		H_LED_void_Toggle (LED_PED_PORT , H_LED_LEDID_LED1);
		MTIMER0_delay(1);
		
	}
	H_LED_void_TurnOff(LED_CAR_PORT , H_LED_LEDID_LED1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	H_LED_void_TurnOff(LED_PED_PORT, H_LED_LEDID_LED1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	
	H_LED_void_TurnOff(LED_PED_PORT , H_LED_LEDID_LED0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	
	
	H_LED_void_TurnOn(LED_PED_PORT , H_LED_LEDID_LED2);
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
	H_LED_void_TurnOn(LED_CAR_PORT , H_LED_LEDID_LED0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <H_LED_void_TurnOn>
	MTIMER0_delay(5);
 2fc:	65 e0       	ldi	r22, 0x05	; 5
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 b0 04 	call	0x960	; 0x960 <MTIMER0_delay>
	
	H_LED_void_TurnOff(LED_PED_PORT , H_LED_LEDID_LED0);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	H_LED_void_TurnOff(LED_PED_PORT , H_LED_LEDID_LED1);
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
	H_LED_void_TurnOff(LED_PED_PORT , H_LED_LEDID_LED2);
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 a8 02 	call	0x550	; 0x550 <H_LED_void_TurnOff>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 320:	98 e0       	ldi	r25, 0x08	; 8
 322:	88 e1       	ldi	r24, 0x18	; 24
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	a8 95       	wdr
 32a:	81 bd       	out	0x21, r24	; 33
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_15MS);

 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	cf 91       	pop	r28
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <H_BTN_void_Init>:
/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
	switch (copy_u8_BtnID)
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	88 30       	cpi	r24, 0x08	; 8
 358:	91 05       	cpc	r25, r1
 35a:	e8 f5       	brcc	.+122    	; 0x3d6 <H_BTN_void_Init+0x82>
 35c:	fc 01       	movw	r30, r24
 35e:	e6 5d       	subi	r30, 0xD6	; 214
 360:	ff 4f       	sbci	r31, 0xFF	; 255
 362:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__tablejump2__>
	{
		case H_BTN_BTNID_BTN0:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN0 , DIO_u8PORT_INPUT);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 370:	80 e0       	ldi	r24, 0x00	; 0
	switch (copy_u8_BtnID)
	{
		case H_BTN_BTNID_BTN0:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN0 , DIO_u8PORT_INPUT);
		break;
 372:	08 95       	ret
		case H_BTN_BTNID_BTN1:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN1 , DIO_u8PORT_INPUT);
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 37e:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN0:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN0 , DIO_u8PORT_INPUT);
		break;
		case H_BTN_BTNID_BTN1:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN1 , DIO_u8PORT_INPUT);
		break;
 380:	08 95       	ret
		case H_BTN_BTNID_BTN2:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN2 , DIO_u8PORT_INPUT);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 38c:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN1:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN1 , DIO_u8PORT_INPUT);
		break;
		case H_BTN_BTNID_BTN2:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN2 , DIO_u8PORT_INPUT);
		break;
 38e:	08 95       	ret
		case H_BTN_BTNID_BTN3:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN3 , DIO_u8PORT_INPUT);
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 39a:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN2:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN2 , DIO_u8PORT_INPUT);
		break;
		case H_BTN_BTNID_BTN3:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN3 , DIO_u8PORT_INPUT);
		break;
 39c:	08 95       	ret
		case H_BTN_BTNID_BTN4:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN4 , DIO_u8PORT_INPUT);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN3:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN3 , DIO_u8PORT_INPUT);
		break;
		case H_BTN_BTNID_BTN4:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN4 , DIO_u8PORT_INPUT);
		break;
 3aa:	08 95       	ret
		case H_BTN_BTNID_BTN5:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN5 , DIO_u8PORT_INPUT);
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	65 e0       	ldi	r22, 0x05	; 5
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN4:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN4 , DIO_u8PORT_INPUT);
		break;
		case H_BTN_BTNID_BTN5:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN5 , DIO_u8PORT_INPUT);
		break;
 3b8:	08 95       	ret
		case H_BTN_BTNID_BTN6:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN6 , DIO_u8PORT_INPUT);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN5:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN5 , DIO_u8PORT_INPUT);
		break;
		case H_BTN_BTNID_BTN6:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN6 , DIO_u8PORT_INPUT);
		break;
 3c6:	08 95       	ret
		case H_BTN_BTNID_BTN7:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN7 , DIO_u8PORT_INPUT);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	67 e0       	ldi	r22, 0x07	; 7
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>

/* Button files */
#include "Button.h"

u8 H_BTN_void_Init(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN6:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN6 , DIO_u8PORT_INPUT);
		break;
		case H_BTN_BTNID_BTN7:
		MDIO_u8SetPinDirection( BTNS_PORT ,  BTN7 , DIO_u8PORT_INPUT);
		break;
 3d4:	08 95       	ret
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return local_u8_BtnVal;
}
 3d8:	08 95       	ret

000003da <H_BTN_u8_SetBtnVal>:
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
	switch (copy_u8_BtnID)
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	88 30       	cpi	r24, 0x08	; 8
 3de:	91 05       	cpc	r25, r1
 3e0:	e8 f5       	brcc	.+122    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3e2:	fc 01       	movw	r30, r24
 3e4:	ee 5c       	subi	r30, 0xCE	; 206
 3e6:	ff 4f       	sbci	r31, 0xFF	; 255
 3e8:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__tablejump2__>
	{
		case H_BTN_BTNID_BTN0:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN0 , DIO_u8PORT_HIGH);
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
	switch (copy_u8_BtnID)
	{
		case H_BTN_BTNID_BTN0:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN0 , DIO_u8PORT_HIGH);
		break;
 3f8:	08 95       	ret
		case H_BTN_BTNID_BTN1:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN1 ,  DIO_u8PORT_HIGH);
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 404:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN0:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN0 , DIO_u8PORT_HIGH);
		break;
		case H_BTN_BTNID_BTN1:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN1 ,  DIO_u8PORT_HIGH);
		break;
 406:	08 95       	ret
		case H_BTN_BTNID_BTN2:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN2 ,  DIO_u8PORT_HIGH);
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 412:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN1:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN1 ,  DIO_u8PORT_HIGH);
		break;
		case H_BTN_BTNID_BTN2:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN2 ,  DIO_u8PORT_HIGH);
		break;
 414:	08 95       	ret
		case H_BTN_BTNID_BTN3:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN3 ,  DIO_u8PORT_HIGH);
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 420:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN2:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN2 ,  DIO_u8PORT_HIGH);
		break;
		case H_BTN_BTNID_BTN3:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN3 ,  DIO_u8PORT_HIGH);
		break;
 422:	08 95       	ret
		case H_BTN_BTNID_BTN4:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN4 ,  DIO_u8PORT_HIGH);
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	64 e0       	ldi	r22, 0x04	; 4
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 42e:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN3:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN3 ,  DIO_u8PORT_HIGH);
		break;
		case H_BTN_BTNID_BTN4:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN4 ,  DIO_u8PORT_HIGH);
		break;
 430:	08 95       	ret
		case H_BTN_BTNID_BTN5:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN5 , DIO_u8PORT_HIGH);
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 43c:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN4:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN4 ,  DIO_u8PORT_HIGH);
		break;
		case H_BTN_BTNID_BTN5:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN5 , DIO_u8PORT_HIGH);
		break;
 43e:	08 95       	ret
		case H_BTN_BTNID_BTN6:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN6 ,  DIO_u8PORT_HIGH);
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	66 e0       	ldi	r22, 0x06	; 6
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 44a:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN5:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN5 , DIO_u8PORT_HIGH);
		break;
		case H_BTN_BTNID_BTN6:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN6 ,  DIO_u8PORT_HIGH);
		break;
 44c:	08 95       	ret
		case H_BTN_BTNID_BTN7:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN7 ,  DIO_u8PORT_HIGH);
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	67 e0       	ldi	r22, 0x07	; 7
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
		default:  local_u8_BtnVal = NOK; /* Wrong Button ID */ break;
	}
	return local_u8_BtnVal;
}
u8  H_BTN_u8_SetBtnVal(u8 copy_u8_BtnID){
	u8 local_u8_BtnVal = OK;
 458:	80 e0       	ldi	r24, 0x00	; 0
		case H_BTN_BTNID_BTN6:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN6 ,  DIO_u8PORT_HIGH);
		break;
		case H_BTN_BTNID_BTN7:
		MDIO_u8SetPinValue( BTNS_PORT ,  BTN7 ,  DIO_u8PORT_HIGH);
		break;
 45a:	08 95       	ret
		default: local_u8_BtnVal = NOK;/* Wrong Button ID */ break;
 45c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return local_u8_BtnVal;
}
 45e:	08 95       	ret

00000460 <H_LED_void_Init>:
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
	switch(copy_u8_LedID){
 460:	46 2f       	mov	r20, r22
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	48 30       	cpi	r20, 0x08	; 8
 466:	51 05       	cpc	r21, r1
 468:	a8 f5       	brcc	.+106    	; 0x4d4 <H_LED_void_Init+0x74>
 46a:	fa 01       	movw	r30, r20
 46c:	e6 5c       	subi	r30, 0xC6	; 198
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__tablejump2__>
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinDirection( copy_u8PortId , LED0 , DIO_u8PORT_OUTPUT) ;
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 47c:	80 e0       	ldi	r24, 0x00	; 0
	switch(copy_u8_LedID){
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinDirection( copy_u8PortId , LED0 , DIO_u8PORT_OUTPUT) ;
		break;
 47e:	08 95       	ret
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinDirection( copy_u8PortId , LED1 , DIO_u8PORT_OUTPUT) ;
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 488:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinDirection( copy_u8PortId , LED0 , DIO_u8PORT_OUTPUT) ;
		break;
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinDirection( copy_u8PortId , LED1 , DIO_u8PORT_OUTPUT) ;
		break;
 48a:	08 95       	ret
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinDirection( copy_u8PortId , LED2 , DIO_u8PORT_OUTPUT) ;
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 494:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinDirection( copy_u8PortId , LED1 , DIO_u8PORT_OUTPUT) ;
		break;
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinDirection( copy_u8PortId , LED2 , DIO_u8PORT_OUTPUT) ;
		break;
 496:	08 95       	ret
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinDirection( copy_u8PortId , LED3 , DIO_u8PORT_OUTPUT) ;
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	63 e0       	ldi	r22, 0x03	; 3
 49c:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinDirection( copy_u8PortId , LED2 , DIO_u8PORT_OUTPUT) ;
		break;
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinDirection( copy_u8PortId , LED3 , DIO_u8PORT_OUTPUT) ;
		break;
 4a2:	08 95       	ret
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinDirection( copy_u8PortId , LED4 , DIO_u8PORT_OUTPUT) ;
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	64 e0       	ldi	r22, 0x04	; 4
 4a8:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 4ac:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinDirection( copy_u8PortId , LED3 , DIO_u8PORT_OUTPUT) ;
		break;
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinDirection( copy_u8PortId , LED4 , DIO_u8PORT_OUTPUT) ;
		break;
 4ae:	08 95       	ret
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinDirection( copy_u8PortId , LED5 , DIO_u8PORT_OUTPUT) ;
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	65 e0       	ldi	r22, 0x05	; 5
 4b4:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinDirection( copy_u8PortId , LED4 , DIO_u8PORT_OUTPUT) ;
		break;
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinDirection( copy_u8PortId , LED5 , DIO_u8PORT_OUTPUT) ;
		break;
 4ba:	08 95       	ret
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinDirection( copy_u8PortId , LED6 , DIO_u8PORT_OUTPUT) ;
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	66 e0       	ldi	r22, 0x06	; 6
 4c0:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinDirection( copy_u8PortId , LED5 , DIO_u8PORT_OUTPUT) ;
		break;
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinDirection( copy_u8PortId , LED6 , DIO_u8PORT_OUTPUT) ;
		break;
 4c6:	08 95       	ret
		case H_LED_LEDID_LED7:
		MDIO_u8SetPinDirection( copy_u8PortId , LED7 , DIO_u8PORT_OUTPUT) ;
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	67 e0       	ldi	r22, 0x07	; 7
 4cc:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
/* 
 * Public Function Prototype 
 */

u8 H_LED_void_Init( u8 copy_u8PortId  , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinDirection( copy_u8PortId , LED6 , DIO_u8PORT_OUTPUT) ;
		break;
		case H_LED_LEDID_LED7:
		MDIO_u8SetPinDirection( copy_u8PortId , LED7 , DIO_u8PORT_OUTPUT) ;
		break;
 4d2:	08 95       	ret
		default:local_u8_BtnVal = NOK;/* Wrong LED ID */
 4d4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return local_u8_BtnVal;
}
 4d6:	08 95       	ret

000004d8 <H_LED_void_TurnOn>:

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
	switch(copy_u8_LedID){
 4d8:	46 2f       	mov	r20, r22
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	48 30       	cpi	r20, 0x08	; 8
 4de:	51 05       	cpc	r21, r1
 4e0:	a8 f5       	brcc	.+106    	; 0x54c <H_LED_void_TurnOn+0x74>
 4e2:	fa 01       	movw	r30, r20
 4e4:	ee 5b       	subi	r30, 0xBE	; 190
 4e6:	ff 4f       	sbci	r31, 0xFF	; 255
 4e8:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__tablejump2__>
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinValue( copy_u8PortId, LED0 , DIO_u8PIN_HIGH) ;
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
	switch(copy_u8_LedID){
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinValue( copy_u8PortId, LED0 , DIO_u8PIN_HIGH) ;
		break;
 4f6:	08 95       	ret
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinValue( copy_u8PortId, LED1 , DIO_u8PIN_HIGH) ;
 4f8:	41 e0       	ldi	r20, 0x01	; 1
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 500:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinValue( copy_u8PortId, LED0 , DIO_u8PIN_HIGH) ;
		break;
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinValue( copy_u8PortId, LED1 , DIO_u8PIN_HIGH) ;
		break;
 502:	08 95       	ret
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinValue( copy_u8PortId, LED2 , DIO_u8PIN_HIGH) ;
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	62 e0       	ldi	r22, 0x02	; 2
 508:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 50c:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinValue( copy_u8PortId, LED1 , DIO_u8PIN_HIGH) ;
		break;
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinValue( copy_u8PortId, LED2 , DIO_u8PIN_HIGH) ;
		break;
 50e:	08 95       	ret
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinValue( copy_u8PortId, LED3 , DIO_u8PIN_HIGH) ;
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	63 e0       	ldi	r22, 0x03	; 3
 514:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 518:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinValue( copy_u8PortId, LED2 , DIO_u8PIN_HIGH) ;
		break;
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinValue( copy_u8PortId, LED3 , DIO_u8PIN_HIGH) ;
		break;
 51a:	08 95       	ret
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinValue( copy_u8PortId, LED4 , DIO_u8PIN_HIGH) ;
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	64 e0       	ldi	r22, 0x04	; 4
 520:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 524:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinValue( copy_u8PortId, LED3 , DIO_u8PIN_HIGH) ;
		break;
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinValue( copy_u8PortId, LED4 , DIO_u8PIN_HIGH) ;
		break;
 526:	08 95       	ret
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinValue( copy_u8PortId, LED5 , DIO_u8PIN_HIGH) ;
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	65 e0       	ldi	r22, 0x05	; 5
 52c:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 530:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinValue( copy_u8PortId, LED4 , DIO_u8PIN_HIGH) ;
		break;
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinValue( copy_u8PortId, LED5 , DIO_u8PIN_HIGH) ;
		break;
 532:	08 95       	ret
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinValue( copy_u8PortId, LED6 , DIO_u8PIN_HIGH) ;
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	66 e0       	ldi	r22, 0x06	; 6
 538:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 53c:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinValue( copy_u8PortId, LED5 , DIO_u8PIN_HIGH) ;
		break;
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinValue( copy_u8PortId, LED6 , DIO_u8PIN_HIGH) ;
		break;
 53e:	08 95       	ret
		case H_LED_LEDID_LED7:
		MDIO_u8SetPinValue( copy_u8PortId, LED7 , DIO_u8PIN_HIGH) ;
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	67 e0       	ldi	r22, 0x07	; 7
 544:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOn(u8 copy_u8PortId  ,u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 548:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinValue( copy_u8PortId, LED6 , DIO_u8PIN_HIGH) ;
		break;
		case H_LED_LEDID_LED7:
		MDIO_u8SetPinValue( copy_u8PortId, LED7 , DIO_u8PIN_HIGH) ;
		break;
 54a:	08 95       	ret
		default: local_u8_BtnVal = NOK;/* Wrong LED ID */
 54c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return local_u8_BtnVal;
}
 54e:	08 95       	ret

00000550 <H_LED_void_TurnOff>:

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
	switch(copy_u8_LedID){
 550:	46 2f       	mov	r20, r22
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	48 30       	cpi	r20, 0x08	; 8
 556:	51 05       	cpc	r21, r1
 558:	a8 f5       	brcc	.+106    	; 0x5c4 <H_LED_void_TurnOff+0x74>
 55a:	fa 01       	movw	r30, r20
 55c:	e6 5b       	subi	r30, 0xB6	; 182
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
 560:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__tablejump2__>
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinValue( copy_u8PortId, LED0 , DIO_u8PIN_LOW);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 56c:	80 e0       	ldi	r24, 0x00	; 0
	switch(copy_u8_LedID){
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinValue( copy_u8PortId, LED0 , DIO_u8PIN_LOW);
		break;
 56e:	08 95       	ret
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinValue( copy_u8PortId, LED1 , DIO_u8PIN_LOW);
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 578:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED0:
		MDIO_u8SetPinValue( copy_u8PortId, LED0 , DIO_u8PIN_LOW);
		break;
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinValue( copy_u8PortId, LED1 , DIO_u8PIN_LOW);
		break;
 57a:	08 95       	ret
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinValue( copy_u8PortId, LED2 , DIO_u8PIN_LOW);
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	62 e0       	ldi	r22, 0x02	; 2
 580:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 584:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED1:
		MDIO_u8SetPinValue( copy_u8PortId, LED1 , DIO_u8PIN_LOW);
		break;
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinValue( copy_u8PortId, LED2 , DIO_u8PIN_LOW);
		break;
 586:	08 95       	ret
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinValue( copy_u8PortId, LED3 , DIO_u8PIN_LOW);
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	63 e0       	ldi	r22, 0x03	; 3
 58c:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 590:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED2:
		MDIO_u8SetPinValue( copy_u8PortId, LED2 , DIO_u8PIN_LOW);
		break;
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinValue( copy_u8PortId, LED3 , DIO_u8PIN_LOW);
		break;
 592:	08 95       	ret
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinValue( copy_u8PortId, LED4 , DIO_u8PIN_LOW);
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	64 e0       	ldi	r22, 0x04	; 4
 598:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 59c:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED3:
		MDIO_u8SetPinValue( copy_u8PortId, LED3 , DIO_u8PIN_LOW);
		break;
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinValue( copy_u8PortId, LED4 , DIO_u8PIN_LOW);
		break;
 59e:	08 95       	ret
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinValue( copy_u8PortId, LED5 , DIO_u8PIN_LOW);
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	65 e0       	ldi	r22, 0x05	; 5
 5a4:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED4:
		MDIO_u8SetPinValue( copy_u8PortId, LED4 , DIO_u8PIN_LOW);
		break;
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinValue( copy_u8PortId, LED5 , DIO_u8PIN_LOW);
		break;
 5aa:	08 95       	ret
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinValue( copy_u8PortId, LED6 , DIO_u8PIN_LOW);
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	66 e0       	ldi	r22, 0x06	; 6
 5b0:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED5:
		MDIO_u8SetPinValue( copy_u8PortId, LED5 , DIO_u8PIN_LOW);
		break;
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinValue( copy_u8PortId, LED6 , DIO_u8PIN_LOW);
		break;
 5b6:	08 95       	ret
		case H_LED_LEDID_LED7:
		MDIO_u8SetPinValue( copy_u8PortId, LED7 , DIO_u8PIN_LOW);
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	67 e0       	ldi	r22, 0x07	; 7
 5bc:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_TurnOff(u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED6:
		MDIO_u8SetPinValue( copy_u8PortId, LED6 , DIO_u8PIN_LOW);
		break;
		case H_LED_LEDID_LED7:
		MDIO_u8SetPinValue( copy_u8PortId, LED7 , DIO_u8PIN_LOW);
		break;
 5c2:	08 95       	ret
		default: local_u8_BtnVal = NOK;/* Wrong LED ID */
 5c4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return local_u8_BtnVal;
}
 5c6:	08 95       	ret

000005c8 <H_LED_void_Toggle>:

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
	switch(copy_u8_LedID){
 5c8:	46 2f       	mov	r20, r22
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	48 30       	cpi	r20, 0x08	; 8
 5ce:	51 05       	cpc	r21, r1
 5d0:	68 f5       	brcc	.+90     	; 0x62c <H_LED_void_Toggle+0x64>
 5d2:	fa 01       	movw	r30, r20
 5d4:	ee 5a       	subi	r30, 0xAE	; 174
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__tablejump2__>
		case H_LED_LEDID_LED0:
		MDIO_u8TogPinValue( copy_u8PortId, LED0); break;
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
	switch(copy_u8_LedID){
		case H_LED_LEDID_LED0:
		MDIO_u8TogPinValue( copy_u8PortId, LED0); break;
 5e4:	08 95       	ret
		case H_LED_LEDID_LED1:
		MDIO_u8TogPinValue( copy_u8PortId, LED1); break;
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 5ec:	80 e0       	ldi	r24, 0x00	; 0
	switch(copy_u8_LedID){
		case H_LED_LEDID_LED0:
		MDIO_u8TogPinValue( copy_u8PortId, LED0); break;
		case H_LED_LEDID_LED1:
		MDIO_u8TogPinValue( copy_u8PortId, LED1); break;
 5ee:	08 95       	ret
		case H_LED_LEDID_LED2:
		MDIO_u8TogPinValue( copy_u8PortId, LED2); break;
 5f0:	62 e0       	ldi	r22, 0x02	; 2
 5f2:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 5f6:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED0:
		MDIO_u8TogPinValue( copy_u8PortId, LED0); break;
		case H_LED_LEDID_LED1:
		MDIO_u8TogPinValue( copy_u8PortId, LED1); break;
		case H_LED_LEDID_LED2:
		MDIO_u8TogPinValue( copy_u8PortId, LED2); break;
 5f8:	08 95       	ret
		case H_LED_LEDID_LED3:
		MDIO_u8TogPinValue( copy_u8PortId, LED3); break;
 5fa:	63 e0       	ldi	r22, 0x03	; 3
 5fc:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 600:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED1:
		MDIO_u8TogPinValue( copy_u8PortId, LED1); break;
		case H_LED_LEDID_LED2:
		MDIO_u8TogPinValue( copy_u8PortId, LED2); break;
		case H_LED_LEDID_LED3:
		MDIO_u8TogPinValue( copy_u8PortId, LED3); break;
 602:	08 95       	ret
		case H_LED_LEDID_LED4:
		MDIO_u8TogPinValue( copy_u8PortId, LED4); break;
 604:	64 e0       	ldi	r22, 0x04	; 4
 606:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 60a:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED2:
		MDIO_u8TogPinValue( copy_u8PortId, LED2); break;
		case H_LED_LEDID_LED3:
		MDIO_u8TogPinValue( copy_u8PortId, LED3); break;
		case H_LED_LEDID_LED4:
		MDIO_u8TogPinValue( copy_u8PortId, LED4); break;
 60c:	08 95       	ret
		case H_LED_LEDID_LED5:
		MDIO_u8TogPinValue( copy_u8PortId, LED5); break;
 60e:	65 e0       	ldi	r22, 0x05	; 5
 610:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 614:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED3:
		MDIO_u8TogPinValue( copy_u8PortId, LED3); break;
		case H_LED_LEDID_LED4:
		MDIO_u8TogPinValue( copy_u8PortId, LED4); break;
		case H_LED_LEDID_LED5:
		MDIO_u8TogPinValue( copy_u8PortId, LED5); break;
 616:	08 95       	ret
		case H_LED_LEDID_LED6:
		MDIO_u8TogPinValue( copy_u8PortId, LED6); break;
 618:	66 e0       	ldi	r22, 0x06	; 6
 61a:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 61e:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED4:
		MDIO_u8TogPinValue( copy_u8PortId, LED4); break;
		case H_LED_LEDID_LED5:
		MDIO_u8TogPinValue( copy_u8PortId, LED5); break;
		case H_LED_LEDID_LED6:
		MDIO_u8TogPinValue( copy_u8PortId, LED6); break;
 620:	08 95       	ret
		case H_LED_LEDID_LED7:
		MDIO_u8TogPinValue( copy_u8PortId, LED7); break;
 622:	67 e0       	ldi	r22, 0x07	; 7
 624:	0e 94 46 04 	call	0x88c	; 0x88c <MDIO_u8TogPinValue>
	}
	return local_u8_BtnVal;
}

u8 H_LED_void_Toggle (u8 copy_u8PortId , u8 copy_u8_LedID){
	u8 local_u8_BtnVal = OK;
 628:	80 e0       	ldi	r24, 0x00	; 0
		case H_LED_LEDID_LED5:
		MDIO_u8TogPinValue( copy_u8PortId, LED5); break;
		case H_LED_LEDID_LED6:
		MDIO_u8TogPinValue( copy_u8PortId, LED6); break;
		case H_LED_LEDID_LED7:
		MDIO_u8TogPinValue( copy_u8PortId, LED7); break;
 62a:	08 95       	ret
		default:local_u8_BtnVal = NOK;/* Wrong LED ID */
 62c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return local_u8_BtnVal;
}
 62e:	08 95       	ret

00000630 <main>:
#include <math.h>
#include "avr/interrupt.h"
int main(void)
{
	
	MDIO_u8SetPinDirection(  DIO_u8PORTD,  DIO_u8PIN2, DIO_u8PIN_INPUT);
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
	MDIO_u8SetPinValue(DIO_u8PORTD,  DIO_u8PIN2, DIO_u8PIN_HIGH);
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	62 e0       	ldi	r22, 0x02	; 2
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	0e 94 b9 03 	call	0x772	; 0x772 <MDIO_u8SetPinValue>
	
	MDIO_u8SetPinDirection(  DIO_u8PORTA,  DIO_u8PIN0, DIO_u8PIN_OUTPUT);
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 2c 03 	call	0x658	; 0x658 <MDIO_u8SetPinDirection>
	
	

	APP_INT ();
 64e:	0e 94 6e 00 	call	0xdc	; 0xdc <APP_INT>
	
    /* Replace with your application code */
    while (1) 
    {
	
APP_start() ;
 652:	0e 94 93 00 	call	0x126	; 0x126 <APP_start>
 656:	fd cf       	rjmp	.-6      	; 0x652 <main+0x22>

00000658 <MDIO_u8SetPinDirection>:
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
	if ( copy_u8PinId<=DIO_u8PIN7)
 658:	68 30       	cpi	r22, 0x08	; 8
 65a:	08 f0       	brcs	.+2      	; 0x65e <MDIO_u8SetPinDirection+0x6>
 65c:	7e c0       	rjmp	.+252    	; 0x75a <MDIO_u8SetPinDirection+0x102>
	{
		switch ( copy_u8PortId)
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	29 f1       	breq	.+74     	; 0x6ac <MDIO_u8SetPinDirection+0x54>
 662:	38 f0       	brcs	.+14     	; 0x672 <MDIO_u8SetPinDirection+0x1a>
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	09 f4       	brne	.+2      	; 0x66a <MDIO_u8SetPinDirection+0x12>
 668:	3e c0       	rjmp	.+124    	; 0x6e6 <MDIO_u8SetPinDirection+0x8e>
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	09 f4       	brne	.+2      	; 0x670 <MDIO_u8SetPinDirection+0x18>
 66e:	58 c0       	rjmp	.+176    	; 0x720 <MDIO_u8SetPinDirection+0xc8>
 670:	76 c0       	rjmp	.+236    	; 0x75e <MDIO_u8SetPinDirection+0x106>
		{
			case DIO_u8PORTA: if (  copy_u8PinDirection == DIO_u8PIN_OUTPUT)
 672:	41 30       	cpi	r20, 0x01	; 1
 674:	61 f4       	brne	.+24     	; 0x68e <MDIO_u8SetPinDirection+0x36>
			{
				SET_BIT( DDRA_REG ,  copy_u8PinId ) ;
 676:	2a b3       	in	r18, 0x1a	; 26
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <MDIO_u8SetPinDirection+0x2a>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <MDIO_u8SetPinDirection+0x26>
 686:	82 2b       	or	r24, r18
 688:	8a bb       	out	0x1a, r24	; 26
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
		{
			case DIO_u8PORTA: if (  copy_u8PinDirection == DIO_u8PIN_OUTPUT)
			{
				SET_BIT( DDRA_REG ,  copy_u8PinId ) ;
			}
			else if ( copy_u8PinDirection == DIO_u8PIN_INPUT)
 68e:	41 11       	cpse	r20, r1
 690:	68 c0       	rjmp	.+208    	; 0x762 <MDIO_u8SetPinDirection+0x10a>
			{
				CLR_BIT( DDRA_REG ,  copy_u8PinId ) ;
 692:	2a b3       	in	r18, 0x1a	; 26
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <MDIO_u8SetPinDirection+0x46>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <MDIO_u8SetPinDirection+0x42>
 6a2:	80 95       	com	r24
 6a4:	82 23       	and	r24, r18
 6a6:	8a bb       	out	0x1a, r24	; 26
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			case DIO_u8PORTB: if ( copy_u8PinDirection == DIO_u8PIN_OUTPUT)
 6ac:	41 30       	cpi	r20, 0x01	; 1
 6ae:	61 f4       	brne	.+24     	; 0x6c8 <MDIO_u8SetPinDirection+0x70>
			{
				SET_BIT( DDRB_REG ,  copy_u8PinId ) ;
 6b0:	27 b3       	in	r18, 0x17	; 23
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <MDIO_u8SetPinDirection+0x64>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <MDIO_u8SetPinDirection+0x60>
 6c0:	82 2b       	or	r24, r18
 6c2:	87 bb       	out	0x17, r24	; 23
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret
			break ;
			case DIO_u8PORTB: if ( copy_u8PinDirection == DIO_u8PIN_OUTPUT)
			{
				SET_BIT( DDRB_REG ,  copy_u8PinId ) ;
			}
			else if (copy_u8PinDirection == DIO_u8PIN_INPUT)
 6c8:	41 11       	cpse	r20, r1
 6ca:	4d c0       	rjmp	.+154    	; 0x766 <MDIO_u8SetPinDirection+0x10e>
			{
				CLR_BIT( DDRB_REG ,  copy_u8PinId ) ;
 6cc:	27 b3       	in	r18, 0x17	; 23
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <MDIO_u8SetPinDirection+0x80>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <MDIO_u8SetPinDirection+0x7c>
 6dc:	80 95       	com	r24
 6de:	82 23       	and	r24, r18
 6e0:	87 bb       	out	0x17, r24	; 23
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			case DIO_u8PORTC: if (  copy_u8PinDirection == DIO_u8PIN_OUTPUT)
 6e6:	41 30       	cpi	r20, 0x01	; 1
 6e8:	61 f4       	brne	.+24     	; 0x702 <MDIO_u8SetPinDirection+0xaa>
			{
				SET_BIT( DDRC_REG ,  copy_u8PinId ) ;
 6ea:	24 b3       	in	r18, 0x14	; 20
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <MDIO_u8SetPinDirection+0x9e>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	6a 95       	dec	r22
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <MDIO_u8SetPinDirection+0x9a>
 6fa:	82 2b       	or	r24, r18
 6fc:	84 bb       	out	0x14, r24	; 20
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	08 95       	ret
			break ;
			case DIO_u8PORTC: if (  copy_u8PinDirection == DIO_u8PIN_OUTPUT)
			{
				SET_BIT( DDRC_REG ,  copy_u8PinId ) ;
			}
			else if ( copy_u8PinDirection == DIO_u8PIN_INPUT)
 702:	41 11       	cpse	r20, r1
 704:	32 c0       	rjmp	.+100    	; 0x76a <MDIO_u8SetPinDirection+0x112>
			{
				CLR_BIT( DDRC_REG ,  copy_u8PinId ) ;
 706:	24 b3       	in	r18, 0x14	; 20
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <MDIO_u8SetPinDirection+0xba>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	6a 95       	dec	r22
 714:	e2 f7       	brpl	.-8      	; 0x70e <MDIO_u8SetPinDirection+0xb6>
 716:	80 95       	com	r24
 718:	82 23       	and	r24, r18
 71a:	84 bb       	out	0x14, r24	; 20
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			case DIO_u8PORTD: if (  copy_u8PinDirection == DIO_u8PIN_OUTPUT)
 720:	41 30       	cpi	r20, 0x01	; 1
 722:	61 f4       	brne	.+24     	; 0x73c <MDIO_u8SetPinDirection+0xe4>
			{
				SET_BIT( DDRD_REG , copy_u8PinId ) ;
 724:	21 b3       	in	r18, 0x11	; 17
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <MDIO_u8SetPinDirection+0xd8>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <MDIO_u8SetPinDirection+0xd4>
 734:	82 2b       	or	r24, r18
 736:	81 bb       	out	0x11, r24	; 17
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	08 95       	ret
			break ;
			case DIO_u8PORTD: if (  copy_u8PinDirection == DIO_u8PIN_OUTPUT)
			{
				SET_BIT( DDRD_REG , copy_u8PinId ) ;
			}
			else if ( copy_u8PinDirection == DIO_u8PIN_INPUT)
 73c:	41 11       	cpse	r20, r1
 73e:	17 c0       	rjmp	.+46     	; 0x76e <MDIO_u8SetPinDirection+0x116>
			{
				CLR_BIT( DDRD_REG ,  copy_u8PinId ) ;
 740:	21 b3       	in	r18, 0x11	; 17
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <MDIO_u8SetPinDirection+0xf4>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	6a 95       	dec	r22
 74e:	e2 f7       	brpl	.-8      	; 0x748 <MDIO_u8SetPinDirection+0xf0>
 750:	80 95       	com	r24
 752:	82 23       	and	r24, r18
 754:	81 bb       	out	0x11, r24	; 17
	return Local_u8ErorrState;
}

u8 MDIO_u8SetPinDirection( u8 copy_u8PortId ,  u8 copy_u8PinId , u8 copy_u8PinDirection)
{
	u8 Local_u8ErorrState= OK;
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret
			default : Local_u8ErorrState= NOK ;/*invalid port id */ break ;
		}
	}
	else
	{
		Local_u8ErorrState= NOK;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			default : Local_u8ErorrState= NOK ;/*invalid port id */ break ;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	08 95       	ret
			{
				CLR_BIT( DDRA_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	08 95       	ret
			{
				CLR_BIT( DDRB_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	08 95       	ret
			{
				CLR_BIT( DDRC_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	08 95       	ret
			{
				CLR_BIT( DDRD_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 76e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErorrState= NOK;
	}
	return  Local_u8ErorrState ;
}
 770:	08 95       	ret

00000772 <MDIO_u8SetPinValue>:

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
	if ( copy_u8PinId<=DIO_u8PIN7)
 772:	68 30       	cpi	r22, 0x08	; 8
 774:	08 f0       	brcs	.+2      	; 0x778 <MDIO_u8SetPinValue+0x6>
 776:	7e c0       	rjmp	.+252    	; 0x874 <__stack+0x15>
	{
		switch ( copy_u8PortId)
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	29 f1       	breq	.+74     	; 0x7c6 <MDIO_u8SetPinValue+0x54>
 77c:	38 f0       	brcs	.+14     	; 0x78c <MDIO_u8SetPinValue+0x1a>
 77e:	82 30       	cpi	r24, 0x02	; 2
 780:	09 f4       	brne	.+2      	; 0x784 <MDIO_u8SetPinValue+0x12>
 782:	3e c0       	rjmp	.+124    	; 0x800 <__DATA_REGION_LENGTH__>
 784:	83 30       	cpi	r24, 0x03	; 3
 786:	09 f4       	brne	.+2      	; 0x78a <MDIO_u8SetPinValue+0x18>
 788:	58 c0       	rjmp	.+176    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 78a:	76 c0       	rjmp	.+236    	; 0x878 <__stack+0x19>
		{
			case DIO_u8PORTA: if ( copy_u8PinValue ==  DIO_u8PIN_HIGH)
 78c:	41 30       	cpi	r20, 0x01	; 1
 78e:	61 f4       	brne	.+24     	; 0x7a8 <MDIO_u8SetPinValue+0x36>
			{
				SET_BIT( PORTA_REG ,  copy_u8PinId ) ;
 790:	2b b3       	in	r18, 0x1b	; 27
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <MDIO_u8SetPinValue+0x2a>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	6a 95       	dec	r22
 79e:	e2 f7       	brpl	.-8      	; 0x798 <MDIO_u8SetPinValue+0x26>
 7a0:	82 2b       	or	r24, r18
 7a2:	8b bb       	out	0x1b, r24	; 27
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	08 95       	ret
		{
			case DIO_u8PORTA: if ( copy_u8PinValue ==  DIO_u8PIN_HIGH)
			{
				SET_BIT( PORTA_REG ,  copy_u8PinId ) ;
			}
			else if ( copy_u8PinValue == DIO_u8PIN_LOW )
 7a8:	41 11       	cpse	r20, r1
 7aa:	68 c0       	rjmp	.+208    	; 0x87c <__stack+0x1d>
			{
				CLR_BIT( PORTA_REG ,  copy_u8PinId ) ;
 7ac:	2b b3       	in	r18, 0x1b	; 27
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <MDIO_u8SetPinValue+0x46>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	6a 95       	dec	r22
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <MDIO_u8SetPinValue+0x42>
 7bc:	80 95       	com	r24
 7be:	82 23       	and	r24, r18
 7c0:	8b bb       	out	0x1b, r24	; 27
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			case DIO_u8PORTB: if (  copy_u8PinValue ==  DIO_u8PIN_HIGH)
 7c6:	41 30       	cpi	r20, 0x01	; 1
 7c8:	61 f4       	brne	.+24     	; 0x7e2 <MDIO_u8SetPinValue+0x70>
			{
				SET_BIT( PORTB_REG ,  copy_u8PinId ) ;
 7ca:	28 b3       	in	r18, 0x18	; 24
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <MDIO_u8SetPinValue+0x64>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <MDIO_u8SetPinValue+0x60>
 7da:	82 2b       	or	r24, r18
 7dc:	88 bb       	out	0x18, r24	; 24
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	08 95       	ret
			break ;
			case DIO_u8PORTB: if (  copy_u8PinValue ==  DIO_u8PIN_HIGH)
			{
				SET_BIT( PORTB_REG ,  copy_u8PinId ) ;
			}
			else if ( copy_u8PinValue == DIO_u8PIN_LOW )
 7e2:	41 11       	cpse	r20, r1
 7e4:	4d c0       	rjmp	.+154    	; 0x880 <__stack+0x21>
			{
				CLR_BIT( PORTB_REG ,  copy_u8PinId ) ;
 7e6:	28 b3       	in	r18, 0x18	; 24
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <MDIO_u8SetPinValue+0x80>
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	6a 95       	dec	r22
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <MDIO_u8SetPinValue+0x7c>
 7f6:	80 95       	com	r24
 7f8:	82 23       	and	r24, r18
 7fa:	88 bb       	out	0x18, r24	; 24
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			case DIO_u8PORTC:  if ( copy_u8PinValue ==  DIO_u8PIN_HIGH)
 800:	41 30       	cpi	r20, 0x01	; 1
 802:	61 f4       	brne	.+24     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
			{
				SET_BIT( PORTC_REG ,  copy_u8PinId ) ;
 804:	25 b3       	in	r18, 0x15	; 21
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	6a 95       	dec	r22
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	82 2b       	or	r24, r18
 816:	85 bb       	out	0x15, r24	; 21
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	08 95       	ret
			break ;
			case DIO_u8PORTC:  if ( copy_u8PinValue ==  DIO_u8PIN_HIGH)
			{
				SET_BIT( PORTC_REG ,  copy_u8PinId ) ;
			}
			else if (copy_u8PinValue  == DIO_u8PIN_LOW )
 81c:	41 11       	cpse	r20, r1
 81e:	32 c0       	rjmp	.+100    	; 0x884 <__stack+0x25>
			{
				CLR_BIT( PORTC_REG ,  copy_u8PinId ) ;
 820:	25 b3       	in	r18, 0x15	; 21
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	6a 95       	dec	r22
 82e:	e2 f7       	brpl	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 830:	80 95       	com	r24
 832:	82 23       	and	r24, r18
 834:	85 bb       	out	0x15, r24	; 21
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			case DIO_u8PORTD: if (  copy_u8PinValue ==  DIO_u8PIN_HIGH)
 83a:	41 30       	cpi	r20, 0x01	; 1
 83c:	61 f4       	brne	.+24     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
			{
				SET_BIT( PORTD_REG ,  copy_u8PinId ) ;
 83e:	22 b3       	in	r18, 0x12	; 18
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	6a 95       	dec	r22
 84c:	e2 f7       	brpl	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	82 2b       	or	r24, r18
 850:	82 bb       	out	0x12, r24	; 18
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	08 95       	ret
			break ;
			case DIO_u8PORTD: if (  copy_u8PinValue ==  DIO_u8PIN_HIGH)
			{
				SET_BIT( PORTD_REG ,  copy_u8PinId ) ;
			}
			else if ( copy_u8PinValue == DIO_u8PIN_LOW )
 856:	41 11       	cpse	r20, r1
 858:	17 c0       	rjmp	.+46     	; 0x888 <__stack+0x29>
			{
				CLR_BIT( PORTD_REG ,  copy_u8PinId ) ;
 85a:	22 b3       	in	r18, 0x12	; 18
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	6a 95       	dec	r22
 868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
 86a:	80 95       	com	r24
 86c:	82 23       	and	r24, r18
 86e:	82 bb       	out	0x12, r24	; 18
	return  Local_u8ErorrState ;
}

u8 MDIO_u8SetPinValue( u8 copy_u8PortId, u8 copy_u8PinId , u8 copy_u8PinValue)
{
	u8 Local_u8ErorrState= OK;
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	08 95       	ret
			default : Local_u8ErorrState=NOK; /*invalid port id */ break ;
		}
	}
	else
	{
		Local_u8ErorrState=NOK;
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	08 95       	ret
			else
			{
				Local_u8ErorrState=NOK; 
			}
			break ;
			default : Local_u8ErorrState=NOK; /*invalid port id */ break ;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	08 95       	ret
			{
				CLR_BIT( PORTA_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	08 95       	ret
			{
				CLR_BIT( PORTB_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	08 95       	ret
			{
				CLR_BIT( PORTC_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	08 95       	ret
			{
				CLR_BIT( PORTD_REG ,  copy_u8PinId ) ;
			}
			else
			{
				Local_u8ErorrState=NOK; 
 888:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErorrState=NOK;
	}
	return  Local_u8ErorrState ;
	
}
 88a:	08 95       	ret

0000088c <MDIO_u8TogPinValue>:


u8 MDIO_u8TogPinValue( u8 copy_u8PortId, u8 copy_u8PinId )
{ u8 Local_u8ErorrState= OK;
	switch ( copy_u8PortId)
 88c:	81 30       	cpi	r24, 0x01	; 1
 88e:	91 f0       	breq	.+36     	; 0x8b4 <MDIO_u8TogPinValue+0x28>
 890:	28 f0       	brcs	.+10     	; 0x89c <MDIO_u8TogPinValue+0x10>
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	d9 f0       	breq	.+54     	; 0x8cc <MDIO_u8TogPinValue+0x40>
 896:	83 30       	cpi	r24, 0x03	; 3
 898:	29 f1       	breq	.+74     	; 0x8e4 <MDIO_u8TogPinValue+0x58>
 89a:	30 c0       	rjmp	.+96     	; 0x8fc <MDIO_u8TogPinValue+0x70>
	{
		case DIO_u8PORTA: TOG_BIT( PORTA_REG ,  copy_u8PinId  );
 89c:	2b b3       	in	r18, 0x1b	; 27
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <MDIO_u8TogPinValue+0x1c>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	6a 95       	dec	r22
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <MDIO_u8TogPinValue+0x18>
 8ac:	82 27       	eor	r24, r18
 8ae:	8b bb       	out	0x1b, r24	; 27
	
}


u8 MDIO_u8TogPinValue( u8 copy_u8PortId, u8 copy_u8PinId )
{ u8 Local_u8ErorrState= OK;
 8b0:	80 e0       	ldi	r24, 0x00	; 0
	switch ( copy_u8PortId)
	{
		case DIO_u8PORTA: TOG_BIT( PORTA_REG ,  copy_u8PinId  );
		break ;
 8b2:	08 95       	ret
		case DIO_u8PORTB: TOG_BIT( PORTB_REG ,  copy_u8PinId  );
 8b4:	28 b3       	in	r18, 0x18	; 24
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <MDIO_u8TogPinValue+0x34>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	6a 95       	dec	r22
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <MDIO_u8TogPinValue+0x30>
 8c4:	82 27       	eor	r24, r18
 8c6:	88 bb       	out	0x18, r24	; 24
	
}


u8 MDIO_u8TogPinValue( u8 copy_u8PortId, u8 copy_u8PinId )
{ u8 Local_u8ErorrState= OK;
 8c8:	80 e0       	ldi	r24, 0x00	; 0
	switch ( copy_u8PortId)
	{
		case DIO_u8PORTA: TOG_BIT( PORTA_REG ,  copy_u8PinId  );
		break ;
		case DIO_u8PORTB: TOG_BIT( PORTB_REG ,  copy_u8PinId  );
		break ;
 8ca:	08 95       	ret
		case DIO_u8PORTC:  TOG_BIT( PORTC_REG , copy_u8PinId  );
 8cc:	25 b3       	in	r18, 0x15	; 21
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <MDIO_u8TogPinValue+0x4c>
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	6a 95       	dec	r22
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <MDIO_u8TogPinValue+0x48>
 8dc:	82 27       	eor	r24, r18
 8de:	85 bb       	out	0x15, r24	; 21
	
}


u8 MDIO_u8TogPinValue( u8 copy_u8PortId, u8 copy_u8PinId )
{ u8 Local_u8ErorrState= OK;
 8e0:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_u8PORTA: TOG_BIT( PORTA_REG ,  copy_u8PinId  );
		break ;
		case DIO_u8PORTB: TOG_BIT( PORTB_REG ,  copy_u8PinId  );
		break ;
		case DIO_u8PORTC:  TOG_BIT( PORTC_REG , copy_u8PinId  );
		break ;
 8e2:	08 95       	ret
		case DIO_u8PORTD: TOG_BIT( PORTD_REG ,  copy_u8PinId  );
 8e4:	22 b3       	in	r18, 0x12	; 18
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <MDIO_u8TogPinValue+0x64>
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	6a 95       	dec	r22
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <MDIO_u8TogPinValue+0x60>
 8f4:	82 27       	eor	r24, r18
 8f6:	82 bb       	out	0x12, r24	; 18
	
}


u8 MDIO_u8TogPinValue( u8 copy_u8PortId, u8 copy_u8PinId )
{ u8 Local_u8ErorrState= OK;
 8f8:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_u8PORTB: TOG_BIT( PORTB_REG ,  copy_u8PinId  );
		break ;
		case DIO_u8PORTC:  TOG_BIT( PORTC_REG , copy_u8PinId  );
		break ;
		case DIO_u8PORTD: TOG_BIT( PORTD_REG ,  copy_u8PinId  );
		break ;
 8fa:	08 95       	ret
		default :  Local_u8ErorrState= NOK;/*invalid port id */ break ;
 8fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return  Local_u8ErorrState ;
}
 8fe:	08 95       	ret

00000900 <M_EXTI_voidInt0Init>:
	#elif  INT0_SENS == ON_CHANGE 
	CLR_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
	
	#elif  INT0_SENS == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
 900:	85 b7       	in	r24, 0x35	; 53
 902:	8e 7f       	andi	r24, 0xFE	; 254
 904:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,MCUCR_ISC01);
 906:	85 b7       	in	r24, 0x35	; 53
 908:	82 60       	ori	r24, 0x02	; 2
 90a:	85 bf       	out	0x35, r24	; 53
	#endif
	

	/* CHECK Peripheral interrupt enable for INT0*/
	#if INTO_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
 90c:	8b b7       	in	r24, 0x3b	; 59
 90e:	80 64       	ori	r24, 0x40	; 64
 910:	8b bf       	out	0x3b, r24	; 59
    Local_u8ErorrState= NOK;
	#endif
	
	return Local_u8ErorrState;
	
}
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	08 95       	ret

00000916 <GIE_voidEnable>:

#include "GIE.h"

void GIE_voidEnable(void)
{
	SET_BIT(SREG,SREG_I);
 916:	8f b7       	in	r24, 0x3f	; 63
 918:	80 68       	ori	r24, 0x80	; 128
 91a:	8f bf       	out	0x3f, r24	; 63
 91c:	08 95       	ret

0000091e <MTIMER0_voidInitialize>:
{
	/*Select Timer0 Mode*/
	u8 Local_u8ErorrState=OK;

	#if TIMER0_MODE == TIMER0_NORMAL_MODE
	CLR_BIT(TCCR0, TCCR0_WGM00);
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	8f 7b       	andi	r24, 0xBF	; 191
 922:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, TCCR0_WGM01);
 924:	83 b7       	in	r24, 0x33	; 51
 926:	87 7f       	andi	r24, 0xF7	; 247
 928:	83 bf       	out	0x33, r24	; 51
	
	/*Enable Mode of Interrupt*/
	#if TIMER0_INTERRUPT_ENABLE == TIMER0_COMPAR_MATCH_INTERRUPT_ENABLE
	SET_BIT(TIMSK, TIMSK_OCIE0);
	#elif TIMER0_INTERRUPT_ENABLE == TIMER0_OVERFLOW_INTERRUPT_ENABLE
	SET_BIT(TIMSK, TIMSK_TOIE0);
 92a:	89 b7       	in	r24, 0x39	; 57
 92c:	81 60       	ori	r24, 0x01	; 1
 92e:	89 bf       	out	0x39, r24	; 57
	//error
	Local_u8ErorrState= NOK;
	#endif
	return Local_u8ErorrState;

}
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	08 95       	ret

00000934 <MTIMER0_START>:
	CLR_BIT(TCCR0, TCCR0_CS00);
	CLR_BIT(TCCR0, TCCR0_CS01);
	CLR_BIT(TCCR0, TCCR0_CS02);

	#elif TIMER0_SELECT_CLK == TIMER0_CLK_NO_PRESCALER
	SET_BIT(TCCR0, TCCR0_CS00);
 934:	83 b7       	in	r24, 0x33	; 51
 936:	81 60       	ori	r24, 0x01	; 1
 938:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, TCCR0_CS01);
 93a:	83 b7       	in	r24, 0x33	; 51
 93c:	8d 7f       	andi	r24, 0xFD	; 253
 93e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, TCCR0_CS02);
 940:	83 b7       	in	r24, 0x33	; 51
 942:	8b 7f       	andi	r24, 0xFB	; 251
 944:	83 bf       	out	0x33, r24	; 51
	//error
	Local_u8ErorrState= NOK;
	#endif
	return Local_u8ErorrState;

}
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	08 95       	ret

0000094a <MTIMER0_STOP>:
	CLR_BIT(TCCR0, TCCR0_CS00);
	CLR_BIT(TCCR0, TCCR0_CS01);
	CLR_BIT(TCCR0, TCCR0_CS02);

	#elif TIMER0_SELECT_CLK == TIMER0_CLK_NO_PRESCALER
	CLR_BIT(TCCR0, TCCR0_CS00);
 94a:	83 b7       	in	r24, 0x33	; 51
 94c:	8e 7f       	andi	r24, 0xFE	; 254
 94e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, TCCR0_CS01);
 950:	83 b7       	in	r24, 0x33	; 51
 952:	8d 7f       	andi	r24, 0xFD	; 253
 954:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, TCCR0_CS02);
 956:	83 b7       	in	r24, 0x33	; 51
 958:	8b 7f       	andi	r24, 0xFB	; 251
 95a:	83 bf       	out	0x33, r24	; 51
	//error
	Local_u8ErorrState= NOK;
	#endif
	return Local_u8ErorrState;

}
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	08 95       	ret

00000960 <MTIMER0_delay>:
// ALL CALCULATION FOR 1M AND NO PRESCALER

u8 MTIMER0_delay(u32 desired_time)
{
 960:	8f 92       	push	r8
 962:	9f 92       	push	r9
 964:	af 92       	push	r10
 966:	bf 92       	push	r11
 968:	cf 92       	push	r12
 96a:	df 92       	push	r13
 96c:	ef 92       	push	r14
 96e:	ff 92       	push	r15
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
	f64 Ttick = ( 1/1000000);
	u32 NUMBER_OF_OVERFLOWS ;
	u32 intial_value ;
	u32  overflowcounter = 0 ;

	if (desired_time == Tmax_delay)
 974:	0e 94 76 06 	call	0xcec	; 0xcec <__floatunsisf>
 978:	4b 01       	movw	r8, r22
 97a:	5c 01       	movw	r10, r24
 97c:	2d eb       	ldi	r18, 0xBD	; 189
 97e:	37 e3       	ldi	r19, 0x37	; 55
 980:	46 e8       	ldi	r20, 0x86	; 134
 982:	59 e3       	ldi	r21, 0x39	; 57
 984:	0e 94 d0 05 	call	0xba0	; 0xba0 <__cmpsf2>
 988:	88 23       	and	r24, r24
 98a:	09 f4       	brne	.+2      	; 0x98e <MTIMER0_delay+0x2e>
 98c:	58 c0       	rjmp	.+176    	; 0xa3e <MTIMER0_delay+0xde>
		intial_value = 0 ;
		NUMBER_OF_OVERFLOWS = 1;
		
	}

	else if (desired_time < Tmax_delay)
 98e:	2d eb       	ldi	r18, 0xBD	; 189
 990:	37 e3       	ldi	r19, 0x37	; 55
 992:	46 e8       	ldi	r20, 0x86	; 134
 994:	59 e3       	ldi	r21, 0x39	; 57
 996:	c5 01       	movw	r24, r10
 998:	b4 01       	movw	r22, r8
 99a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__cmpsf2>
 99e:	88 23       	and	r24, r24
 9a0:	b4 f4       	brge	.+44     	; 0x9ce <MTIMER0_delay+0x6e>
	{
		intial_value = (Tmax_delay-desired_time) /Ttick  ;
 9a2:	a5 01       	movw	r20, r10
 9a4:	94 01       	movw	r18, r8
 9a6:	6d eb       	ldi	r22, 0xBD	; 189
 9a8:	77 e3       	ldi	r23, 0x37	; 55
 9aa:	86 e8       	ldi	r24, 0x86	; 134
 9ac:	99 e3       	ldi	r25, 0x39	; 57
 9ae:	0e 94 4c 05 	call	0xa98	; 0xa98 <__subsf3>
 9b2:	20 e0       	ldi	r18, 0x00	; 0
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	a9 01       	movw	r20, r18
 9b8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 9bc:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fixunssfsi>
 9c0:	c6 2f       	mov	r28, r22
		NUMBER_OF_OVERFLOWS = 1;
 9c2:	c1 2c       	mov	r12, r1
 9c4:	d1 2c       	mov	r13, r1
 9c6:	76 01       	movw	r14, r12
 9c8:	c3 94       	inc	r12
}
// ALL CALCULATION FOR 1M AND NO PRESCALER

u8 MTIMER0_delay(u32 desired_time)
{
	u8 Local_u8ErorrState=OK;
 9ca:	d0 e0       	ldi	r29, 0x00	; 0
 9cc:	40 c0       	rjmp	.+128    	; 0xa4e <MTIMER0_delay+0xee>
		intial_value = (Tmax_delay-desired_time) /Ttick  ;
		NUMBER_OF_OVERFLOWS = 1;
		
	}

	else if (desired_time > Tmax_delay)
 9ce:	2d eb       	ldi	r18, 0xBD	; 189
 9d0:	37 e3       	ldi	r19, 0x37	; 55
 9d2:	46 e8       	ldi	r20, 0x86	; 134
 9d4:	59 e3       	ldi	r21, 0x39	; 57
 9d6:	c5 01       	movw	r24, r10
 9d8:	b4 01       	movw	r22, r8
 9da:	0e 94 69 07 	call	0xed2	; 0xed2 <__gesf2>
 9de:	18 16       	cp	r1, r24
 9e0:	ac f5       	brge	.+106    	; 0xa4c <MTIMER0_delay+0xec>
	{
		NUMBER_OF_OVERFLOWS = ceil (desired_time / Tmax_delay);
 9e2:	2d eb       	ldi	r18, 0xBD	; 189
 9e4:	37 e3       	ldi	r19, 0x37	; 55
 9e6:	46 e8       	ldi	r20, 0x86	; 134
 9e8:	59 e3       	ldi	r21, 0x39	; 57
 9ea:	c5 01       	movw	r24, r10
 9ec:	b4 01       	movw	r22, r8
 9ee:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 9f2:	0e 94 b9 05 	call	0xb72	; 0xb72 <ceil>
 9f6:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fixunssfsi>
 9fa:	6b 01       	movw	r12, r22
 9fc:	7c 01       	movw	r14, r24
		intial_value = 256 - ((desired_time/Ttick )/NUMBER_OF_OVERFLOWS) ;
 9fe:	20 e0       	ldi	r18, 0x00	; 0
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	a9 01       	movw	r20, r18
 a04:	c5 01       	movw	r24, r10
 a06:	b4 01       	movw	r22, r8
 a08:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 a0c:	4b 01       	movw	r8, r22
 a0e:	5c 01       	movw	r10, r24
 a10:	c7 01       	movw	r24, r14
 a12:	b6 01       	movw	r22, r12
 a14:	0e 94 76 06 	call	0xcec	; 0xcec <__floatunsisf>
 a18:	9b 01       	movw	r18, r22
 a1a:	ac 01       	movw	r20, r24
 a1c:	c5 01       	movw	r24, r10
 a1e:	b4 01       	movw	r22, r8
 a20:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	80 e8       	ldi	r24, 0x80	; 128
 a2e:	93 e4       	ldi	r25, 0x43	; 67
 a30:	0e 94 4c 05 	call	0xa98	; 0xa98 <__subsf3>
 a34:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fixunssfsi>
 a38:	c6 2f       	mov	r28, r22
}
// ALL CALCULATION FOR 1M AND NO PRESCALER

u8 MTIMER0_delay(u32 desired_time)
{
	u8 Local_u8ErorrState=OK;
 a3a:	d0 e0       	ldi	r29, 0x00	; 0
 a3c:	08 c0       	rjmp	.+16     	; 0xa4e <MTIMER0_delay+0xee>
	u32 intial_value ;
	u32  overflowcounter = 0 ;

	if (desired_time == Tmax_delay)
	{
		intial_value = 0 ;
 a3e:	c0 e0       	ldi	r28, 0x00	; 0
		NUMBER_OF_OVERFLOWS = 1;
 a40:	c1 2c       	mov	r12, r1
 a42:	d1 2c       	mov	r13, r1
 a44:	76 01       	movw	r14, r12
 a46:	c3 94       	inc	r12
}
// ALL CALCULATION FOR 1M AND NO PRESCALER

u8 MTIMER0_delay(u32 desired_time)
{
	u8 Local_u8ErorrState=OK;
 a48:	d0 e0       	ldi	r29, 0x00	; 0
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <MTIMER0_delay+0xee>
		
	}

	else
	{
		Local_u8ErorrState= NOK;
 a4c:	d1 e0       	ldi	r29, 0x01	; 1
	}
	TCNT0 = intial_value  ;
 a4e:	c2 bf       	out	0x32, r28	; 50
	MTIMER0_START();
 a50:	0e 94 9a 04 	call	0x934	; 0x934 <MTIMER0_START>
	u8 Local_u8ErorrState=OK;
	f64 Tmax_delay = 0.000256; //Ttick  * 2^(8)
	f64 Ttick = ( 1/1000000);
	u32 NUMBER_OF_OVERFLOWS ;
	u32 intial_value ;
	u32  overflowcounter = 0 ;
 a54:	40 e0       	ldi	r20, 0x00	; 0
 a56:	50 e0       	ldi	r21, 0x00	; 0
 a58:	ba 01       	movw	r22, r20
	{
		Local_u8ErorrState= NOK;
	}
	TCNT0 = intial_value  ;
	MTIMER0_START();
	while (overflowcounter < NUMBER_OF_OVERFLOWS )
 a5a:	0a c0       	rjmp	.+20     	; 0xa70 <MTIMER0_delay+0x110>
	{
		while(GET_BIT(TIFR, TIFR_TOV0) == 0);// wait till the timer overflow flag is SET
 a5c:	08 b6       	in	r0, 0x38	; 56
 a5e:	00 fe       	sbrs	r0, 0
 a60:	fd cf       	rjmp	.-6      	; 0xa5c <MTIMER0_delay+0xfc>
		
		SET_BIT(TIFR, TIFR_TOV0); //clear timer1 overflow flag
 a62:	88 b7       	in	r24, 0x38	; 56
 a64:	81 60       	ori	r24, 0x01	; 1
 a66:	88 bf       	out	0x38, r24	; 56
		overflowcounter ++ ;
 a68:	4f 5f       	subi	r20, 0xFF	; 255
 a6a:	5f 4f       	sbci	r21, 0xFF	; 255
 a6c:	6f 4f       	sbci	r22, 0xFF	; 255
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		Local_u8ErorrState= NOK;
	}
	TCNT0 = intial_value  ;
	MTIMER0_START();
	while (overflowcounter < NUMBER_OF_OVERFLOWS )
 a70:	4c 15       	cp	r20, r12
 a72:	5d 05       	cpc	r21, r13
 a74:	6e 05       	cpc	r22, r14
 a76:	7f 05       	cpc	r23, r15
 a78:	88 f3       	brcs	.-30     	; 0xa5c <MTIMER0_delay+0xfc>
		overflowcounter ++ ;

	}

	overflowcounter = 0  ;
	TCNT0 = 0x00;
 a7a:	12 be       	out	0x32, r1	; 50
	MTIMER0_STOP();
 a7c:	0e 94 a5 04 	call	0x94a	; 0x94a <MTIMER0_STOP>
	
	return Local_u8ErorrState;
 a80:	8d 2f       	mov	r24, r29
 a82:	df 91       	pop	r29
 a84:	cf 91       	pop	r28
 a86:	ff 90       	pop	r15
 a88:	ef 90       	pop	r14
 a8a:	df 90       	pop	r13
 a8c:	cf 90       	pop	r12
 a8e:	bf 90       	pop	r11
 a90:	af 90       	pop	r10
 a92:	9f 90       	pop	r9
 a94:	8f 90       	pop	r8
 a96:	08 95       	ret

00000a98 <__subsf3>:
 a98:	50 58       	subi	r21, 0x80	; 128

00000a9a <__addsf3>:
 a9a:	bb 27       	eor	r27, r27
 a9c:	aa 27       	eor	r26, r26
 a9e:	0e 94 64 05 	call	0xac8	; 0xac8 <__addsf3x>
 aa2:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>
 aa6:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_pscA>
 aaa:	38 f0       	brcs	.+14     	; 0xaba <__addsf3+0x20>
 aac:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscB>
 ab0:	20 f0       	brcs	.+8      	; 0xaba <__addsf3+0x20>
 ab2:	39 f4       	brne	.+14     	; 0xac2 <__addsf3+0x28>
 ab4:	9f 3f       	cpi	r25, 0xFF	; 255
 ab6:	19 f4       	brne	.+6      	; 0xabe <__addsf3+0x24>
 ab8:	26 f4       	brtc	.+8      	; 0xac2 <__addsf3+0x28>
 aba:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>
 abe:	0e f4       	brtc	.+2      	; 0xac2 <__addsf3+0x28>
 ac0:	e0 95       	com	r30
 ac2:	e7 fb       	bst	r30, 7
 ac4:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>

00000ac8 <__addsf3x>:
 ac8:	e9 2f       	mov	r30, r25
 aca:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_split3>
 ace:	58 f3       	brcs	.-42     	; 0xaa6 <__addsf3+0xc>
 ad0:	ba 17       	cp	r27, r26
 ad2:	62 07       	cpc	r22, r18
 ad4:	73 07       	cpc	r23, r19
 ad6:	84 07       	cpc	r24, r20
 ad8:	95 07       	cpc	r25, r21
 ada:	20 f0       	brcs	.+8      	; 0xae4 <__addsf3x+0x1c>
 adc:	79 f4       	brne	.+30     	; 0xafc <__addsf3x+0x34>
 ade:	a6 f5       	brtc	.+104    	; 0xb48 <__addsf3x+0x80>
 ae0:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__fp_zero>
 ae4:	0e f4       	brtc	.+2      	; 0xae8 <__addsf3x+0x20>
 ae6:	e0 95       	com	r30
 ae8:	0b 2e       	mov	r0, r27
 aea:	ba 2f       	mov	r27, r26
 aec:	a0 2d       	mov	r26, r0
 aee:	0b 01       	movw	r0, r22
 af0:	b9 01       	movw	r22, r18
 af2:	90 01       	movw	r18, r0
 af4:	0c 01       	movw	r0, r24
 af6:	ca 01       	movw	r24, r20
 af8:	a0 01       	movw	r20, r0
 afa:	11 24       	eor	r1, r1
 afc:	ff 27       	eor	r31, r31
 afe:	59 1b       	sub	r21, r25
 b00:	99 f0       	breq	.+38     	; 0xb28 <__addsf3x+0x60>
 b02:	59 3f       	cpi	r21, 0xF9	; 249
 b04:	50 f4       	brcc	.+20     	; 0xb1a <__addsf3x+0x52>
 b06:	50 3e       	cpi	r21, 0xE0	; 224
 b08:	68 f1       	brcs	.+90     	; 0xb64 <__addsf3x+0x9c>
 b0a:	1a 16       	cp	r1, r26
 b0c:	f0 40       	sbci	r31, 0x00	; 0
 b0e:	a2 2f       	mov	r26, r18
 b10:	23 2f       	mov	r18, r19
 b12:	34 2f       	mov	r19, r20
 b14:	44 27       	eor	r20, r20
 b16:	58 5f       	subi	r21, 0xF8	; 248
 b18:	f3 cf       	rjmp	.-26     	; 0xb00 <__addsf3x+0x38>
 b1a:	46 95       	lsr	r20
 b1c:	37 95       	ror	r19
 b1e:	27 95       	ror	r18
 b20:	a7 95       	ror	r26
 b22:	f0 40       	sbci	r31, 0x00	; 0
 b24:	53 95       	inc	r21
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__addsf3x+0x52>
 b28:	7e f4       	brtc	.+30     	; 0xb48 <__addsf3x+0x80>
 b2a:	1f 16       	cp	r1, r31
 b2c:	ba 0b       	sbc	r27, r26
 b2e:	62 0b       	sbc	r22, r18
 b30:	73 0b       	sbc	r23, r19
 b32:	84 0b       	sbc	r24, r20
 b34:	ba f0       	brmi	.+46     	; 0xb64 <__addsf3x+0x9c>
 b36:	91 50       	subi	r25, 0x01	; 1
 b38:	a1 f0       	breq	.+40     	; 0xb62 <__addsf3x+0x9a>
 b3a:	ff 0f       	add	r31, r31
 b3c:	bb 1f       	adc	r27, r27
 b3e:	66 1f       	adc	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	c2 f7       	brpl	.-16     	; 0xb36 <__addsf3x+0x6e>
 b46:	0e c0       	rjmp	.+28     	; 0xb64 <__addsf3x+0x9c>
 b48:	ba 0f       	add	r27, r26
 b4a:	62 1f       	adc	r22, r18
 b4c:	73 1f       	adc	r23, r19
 b4e:	84 1f       	adc	r24, r20
 b50:	48 f4       	brcc	.+18     	; 0xb64 <__addsf3x+0x9c>
 b52:	87 95       	ror	r24
 b54:	77 95       	ror	r23
 b56:	67 95       	ror	r22
 b58:	b7 95       	ror	r27
 b5a:	f7 95       	ror	r31
 b5c:	9e 3f       	cpi	r25, 0xFE	; 254
 b5e:	08 f0       	brcs	.+2      	; 0xb62 <__addsf3x+0x9a>
 b60:	b0 cf       	rjmp	.-160    	; 0xac2 <__addsf3+0x28>
 b62:	93 95       	inc	r25
 b64:	88 0f       	add	r24, r24
 b66:	08 f0       	brcs	.+2      	; 0xb6a <__addsf3x+0xa2>
 b68:	99 27       	eor	r25, r25
 b6a:	ee 0f       	add	r30, r30
 b6c:	97 95       	ror	r25
 b6e:	87 95       	ror	r24
 b70:	08 95       	ret

00000b72 <ceil>:
 b72:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_trunc>
 b76:	90 f0       	brcs	.+36     	; 0xb9c <ceil+0x2a>
 b78:	9f 37       	cpi	r25, 0x7F	; 127
 b7a:	48 f4       	brcc	.+18     	; 0xb8e <ceil+0x1c>
 b7c:	91 11       	cpse	r25, r1
 b7e:	16 f4       	brtc	.+4      	; 0xb84 <ceil+0x12>
 b80:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	70 e0       	ldi	r23, 0x00	; 0
 b88:	80 e8       	ldi	r24, 0x80	; 128
 b8a:	9f e3       	ldi	r25, 0x3F	; 63
 b8c:	08 95       	ret
 b8e:	26 f0       	brts	.+8      	; 0xb98 <ceil+0x26>
 b90:	1b 16       	cp	r1, r27
 b92:	61 1d       	adc	r22, r1
 b94:	71 1d       	adc	r23, r1
 b96:	81 1d       	adc	r24, r1
 b98:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_mintl>
 b9c:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__fp_mpack>

00000ba0 <__cmpsf2>:
 ba0:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fp_cmp>
 ba4:	08 f4       	brcc	.+2      	; 0xba8 <__cmpsf2+0x8>
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	08 95       	ret

00000baa <__divsf3>:
 baa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__divsf3x>
 bae:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>
 bb2:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscB>
 bb6:	58 f0       	brcs	.+22     	; 0xbce <__divsf3+0x24>
 bb8:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_pscA>
 bbc:	40 f0       	brcs	.+16     	; 0xbce <__divsf3+0x24>
 bbe:	29 f4       	brne	.+10     	; 0xbca <__divsf3+0x20>
 bc0:	5f 3f       	cpi	r21, 0xFF	; 255
 bc2:	29 f0       	breq	.+10     	; 0xbce <__divsf3+0x24>
 bc4:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>
 bc8:	51 11       	cpse	r21, r1
 bca:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>
 bce:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>

00000bd2 <__divsf3x>:
 bd2:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_split3>
 bd6:	68 f3       	brcs	.-38     	; 0xbb2 <__divsf3+0x8>

00000bd8 <__divsf3_pse>:
 bd8:	99 23       	and	r25, r25
 bda:	b1 f3       	breq	.-20     	; 0xbc8 <__divsf3+0x1e>
 bdc:	55 23       	and	r21, r21
 bde:	91 f3       	breq	.-28     	; 0xbc4 <__divsf3+0x1a>
 be0:	95 1b       	sub	r25, r21
 be2:	55 0b       	sbc	r21, r21
 be4:	bb 27       	eor	r27, r27
 be6:	aa 27       	eor	r26, r26
 be8:	62 17       	cp	r22, r18
 bea:	73 07       	cpc	r23, r19
 bec:	84 07       	cpc	r24, r20
 bee:	38 f0       	brcs	.+14     	; 0xbfe <__divsf3_pse+0x26>
 bf0:	9f 5f       	subi	r25, 0xFF	; 255
 bf2:	5f 4f       	sbci	r21, 0xFF	; 255
 bf4:	22 0f       	add	r18, r18
 bf6:	33 1f       	adc	r19, r19
 bf8:	44 1f       	adc	r20, r20
 bfa:	aa 1f       	adc	r26, r26
 bfc:	a9 f3       	breq	.-22     	; 0xbe8 <__divsf3_pse+0x10>
 bfe:	35 d0       	rcall	.+106    	; 0xc6a <__divsf3_pse+0x92>
 c00:	0e 2e       	mov	r0, r30
 c02:	3a f0       	brmi	.+14     	; 0xc12 <__divsf3_pse+0x3a>
 c04:	e0 e8       	ldi	r30, 0x80	; 128
 c06:	32 d0       	rcall	.+100    	; 0xc6c <__divsf3_pse+0x94>
 c08:	91 50       	subi	r25, 0x01	; 1
 c0a:	50 40       	sbci	r21, 0x00	; 0
 c0c:	e6 95       	lsr	r30
 c0e:	00 1c       	adc	r0, r0
 c10:	ca f7       	brpl	.-14     	; 0xc04 <__divsf3_pse+0x2c>
 c12:	2b d0       	rcall	.+86     	; 0xc6a <__divsf3_pse+0x92>
 c14:	fe 2f       	mov	r31, r30
 c16:	29 d0       	rcall	.+82     	; 0xc6a <__divsf3_pse+0x92>
 c18:	66 0f       	add	r22, r22
 c1a:	77 1f       	adc	r23, r23
 c1c:	88 1f       	adc	r24, r24
 c1e:	bb 1f       	adc	r27, r27
 c20:	26 17       	cp	r18, r22
 c22:	37 07       	cpc	r19, r23
 c24:	48 07       	cpc	r20, r24
 c26:	ab 07       	cpc	r26, r27
 c28:	b0 e8       	ldi	r27, 0x80	; 128
 c2a:	09 f0       	breq	.+2      	; 0xc2e <__divsf3_pse+0x56>
 c2c:	bb 0b       	sbc	r27, r27
 c2e:	80 2d       	mov	r24, r0
 c30:	bf 01       	movw	r22, r30
 c32:	ff 27       	eor	r31, r31
 c34:	93 58       	subi	r25, 0x83	; 131
 c36:	5f 4f       	sbci	r21, 0xFF	; 255
 c38:	3a f0       	brmi	.+14     	; 0xc48 <__divsf3_pse+0x70>
 c3a:	9e 3f       	cpi	r25, 0xFE	; 254
 c3c:	51 05       	cpc	r21, r1
 c3e:	78 f0       	brcs	.+30     	; 0xc5e <__divsf3_pse+0x86>
 c40:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>
 c44:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_szero>
 c48:	5f 3f       	cpi	r21, 0xFF	; 255
 c4a:	e4 f3       	brlt	.-8      	; 0xc44 <__divsf3_pse+0x6c>
 c4c:	98 3e       	cpi	r25, 0xE8	; 232
 c4e:	d4 f3       	brlt	.-12     	; 0xc44 <__divsf3_pse+0x6c>
 c50:	86 95       	lsr	r24
 c52:	77 95       	ror	r23
 c54:	67 95       	ror	r22
 c56:	b7 95       	ror	r27
 c58:	f7 95       	ror	r31
 c5a:	9f 5f       	subi	r25, 0xFF	; 255
 c5c:	c9 f7       	brne	.-14     	; 0xc50 <__divsf3_pse+0x78>
 c5e:	88 0f       	add	r24, r24
 c60:	91 1d       	adc	r25, r1
 c62:	96 95       	lsr	r25
 c64:	87 95       	ror	r24
 c66:	97 f9       	bld	r25, 7
 c68:	08 95       	ret
 c6a:	e1 e0       	ldi	r30, 0x01	; 1
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	bb 1f       	adc	r27, r27
 c74:	62 17       	cp	r22, r18
 c76:	73 07       	cpc	r23, r19
 c78:	84 07       	cpc	r24, r20
 c7a:	ba 07       	cpc	r27, r26
 c7c:	20 f0       	brcs	.+8      	; 0xc86 <__divsf3_pse+0xae>
 c7e:	62 1b       	sub	r22, r18
 c80:	73 0b       	sbc	r23, r19
 c82:	84 0b       	sbc	r24, r20
 c84:	ba 0b       	sbc	r27, r26
 c86:	ee 1f       	adc	r30, r30
 c88:	88 f7       	brcc	.-30     	; 0xc6c <__divsf3_pse+0x94>
 c8a:	e0 95       	com	r30
 c8c:	08 95       	ret

00000c8e <__fixunssfsi>:
 c8e:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_splitA>
 c92:	88 f0       	brcs	.+34     	; 0xcb6 <__fixunssfsi+0x28>
 c94:	9f 57       	subi	r25, 0x7F	; 127
 c96:	98 f0       	brcs	.+38     	; 0xcbe <__fixunssfsi+0x30>
 c98:	b9 2f       	mov	r27, r25
 c9a:	99 27       	eor	r25, r25
 c9c:	b7 51       	subi	r27, 0x17	; 23
 c9e:	b0 f0       	brcs	.+44     	; 0xccc <__fixunssfsi+0x3e>
 ca0:	e1 f0       	breq	.+56     	; 0xcda <__fixunssfsi+0x4c>
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	1a f0       	brmi	.+6      	; 0xcb2 <__fixunssfsi+0x24>
 cac:	ba 95       	dec	r27
 cae:	c9 f7       	brne	.-14     	; 0xca2 <__fixunssfsi+0x14>
 cb0:	14 c0       	rjmp	.+40     	; 0xcda <__fixunssfsi+0x4c>
 cb2:	b1 30       	cpi	r27, 0x01	; 1
 cb4:	91 f0       	breq	.+36     	; 0xcda <__fixunssfsi+0x4c>
 cb6:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_zero>
 cba:	b1 e0       	ldi	r27, 0x01	; 1
 cbc:	08 95       	ret
 cbe:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__fp_zero>
 cc2:	67 2f       	mov	r22, r23
 cc4:	78 2f       	mov	r23, r24
 cc6:	88 27       	eor	r24, r24
 cc8:	b8 5f       	subi	r27, 0xF8	; 248
 cca:	39 f0       	breq	.+14     	; 0xcda <__fixunssfsi+0x4c>
 ccc:	b9 3f       	cpi	r27, 0xF9	; 249
 cce:	cc f3       	brlt	.-14     	; 0xcc2 <__fixunssfsi+0x34>
 cd0:	86 95       	lsr	r24
 cd2:	77 95       	ror	r23
 cd4:	67 95       	ror	r22
 cd6:	b3 95       	inc	r27
 cd8:	d9 f7       	brne	.-10     	; 0xcd0 <__fixunssfsi+0x42>
 cda:	3e f4       	brtc	.+14     	; 0xcea <__fixunssfsi+0x5c>
 cdc:	90 95       	com	r25
 cde:	80 95       	com	r24
 ce0:	70 95       	com	r23
 ce2:	61 95       	neg	r22
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255
 ce6:	8f 4f       	sbci	r24, 0xFF	; 255
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__floatunsisf>:
 cec:	e8 94       	clt
 cee:	09 c0       	rjmp	.+18     	; 0xd02 <__floatsisf+0x12>

00000cf0 <__floatsisf>:
 cf0:	97 fb       	bst	r25, 7
 cf2:	3e f4       	brtc	.+14     	; 0xd02 <__floatsisf+0x12>
 cf4:	90 95       	com	r25
 cf6:	80 95       	com	r24
 cf8:	70 95       	com	r23
 cfa:	61 95       	neg	r22
 cfc:	7f 4f       	sbci	r23, 0xFF	; 255
 cfe:	8f 4f       	sbci	r24, 0xFF	; 255
 d00:	9f 4f       	sbci	r25, 0xFF	; 255
 d02:	99 23       	and	r25, r25
 d04:	a9 f0       	breq	.+42     	; 0xd30 <__floatsisf+0x40>
 d06:	f9 2f       	mov	r31, r25
 d08:	96 e9       	ldi	r25, 0x96	; 150
 d0a:	bb 27       	eor	r27, r27
 d0c:	93 95       	inc	r25
 d0e:	f6 95       	lsr	r31
 d10:	87 95       	ror	r24
 d12:	77 95       	ror	r23
 d14:	67 95       	ror	r22
 d16:	b7 95       	ror	r27
 d18:	f1 11       	cpse	r31, r1
 d1a:	f8 cf       	rjmp	.-16     	; 0xd0c <__floatsisf+0x1c>
 d1c:	fa f4       	brpl	.+62     	; 0xd5c <__floatsisf+0x6c>
 d1e:	bb 0f       	add	r27, r27
 d20:	11 f4       	brne	.+4      	; 0xd26 <__floatsisf+0x36>
 d22:	60 ff       	sbrs	r22, 0
 d24:	1b c0       	rjmp	.+54     	; 0xd5c <__floatsisf+0x6c>
 d26:	6f 5f       	subi	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	16 c0       	rjmp	.+44     	; 0xd5c <__floatsisf+0x6c>
 d30:	88 23       	and	r24, r24
 d32:	11 f0       	breq	.+4      	; 0xd38 <__floatsisf+0x48>
 d34:	96 e9       	ldi	r25, 0x96	; 150
 d36:	11 c0       	rjmp	.+34     	; 0xd5a <__floatsisf+0x6a>
 d38:	77 23       	and	r23, r23
 d3a:	21 f0       	breq	.+8      	; 0xd44 <__floatsisf+0x54>
 d3c:	9e e8       	ldi	r25, 0x8E	; 142
 d3e:	87 2f       	mov	r24, r23
 d40:	76 2f       	mov	r23, r22
 d42:	05 c0       	rjmp	.+10     	; 0xd4e <__floatsisf+0x5e>
 d44:	66 23       	and	r22, r22
 d46:	71 f0       	breq	.+28     	; 0xd64 <__floatsisf+0x74>
 d48:	96 e8       	ldi	r25, 0x86	; 134
 d4a:	86 2f       	mov	r24, r22
 d4c:	70 e0       	ldi	r23, 0x00	; 0
 d4e:	60 e0       	ldi	r22, 0x00	; 0
 d50:	2a f0       	brmi	.+10     	; 0xd5c <__floatsisf+0x6c>
 d52:	9a 95       	dec	r25
 d54:	66 0f       	add	r22, r22
 d56:	77 1f       	adc	r23, r23
 d58:	88 1f       	adc	r24, r24
 d5a:	da f7       	brpl	.-10     	; 0xd52 <__floatsisf+0x62>
 d5c:	88 0f       	add	r24, r24
 d5e:	96 95       	lsr	r25
 d60:	87 95       	ror	r24
 d62:	97 f9       	bld	r25, 7
 d64:	08 95       	ret

00000d66 <__fp_cmp>:
 d66:	99 0f       	add	r25, r25
 d68:	00 08       	sbc	r0, r0
 d6a:	55 0f       	add	r21, r21
 d6c:	aa 0b       	sbc	r26, r26
 d6e:	e0 e8       	ldi	r30, 0x80	; 128
 d70:	fe ef       	ldi	r31, 0xFE	; 254
 d72:	16 16       	cp	r1, r22
 d74:	17 06       	cpc	r1, r23
 d76:	e8 07       	cpc	r30, r24
 d78:	f9 07       	cpc	r31, r25
 d7a:	c0 f0       	brcs	.+48     	; 0xdac <__fp_cmp+0x46>
 d7c:	12 16       	cp	r1, r18
 d7e:	13 06       	cpc	r1, r19
 d80:	e4 07       	cpc	r30, r20
 d82:	f5 07       	cpc	r31, r21
 d84:	98 f0       	brcs	.+38     	; 0xdac <__fp_cmp+0x46>
 d86:	62 1b       	sub	r22, r18
 d88:	73 0b       	sbc	r23, r19
 d8a:	84 0b       	sbc	r24, r20
 d8c:	95 0b       	sbc	r25, r21
 d8e:	39 f4       	brne	.+14     	; 0xd9e <__fp_cmp+0x38>
 d90:	0a 26       	eor	r0, r26
 d92:	61 f0       	breq	.+24     	; 0xdac <__fp_cmp+0x46>
 d94:	23 2b       	or	r18, r19
 d96:	24 2b       	or	r18, r20
 d98:	25 2b       	or	r18, r21
 d9a:	21 f4       	brne	.+8      	; 0xda4 <__fp_cmp+0x3e>
 d9c:	08 95       	ret
 d9e:	0a 26       	eor	r0, r26
 da0:	09 f4       	brne	.+2      	; 0xda4 <__fp_cmp+0x3e>
 da2:	a1 40       	sbci	r26, 0x01	; 1
 da4:	a6 95       	lsr	r26
 da6:	8f ef       	ldi	r24, 0xFF	; 255
 da8:	81 1d       	adc	r24, r1
 daa:	81 1d       	adc	r24, r1
 dac:	08 95       	ret

00000dae <__fp_inf>:
 dae:	97 f9       	bld	r25, 7
 db0:	9f 67       	ori	r25, 0x7F	; 127
 db2:	80 e8       	ldi	r24, 0x80	; 128
 db4:	70 e0       	ldi	r23, 0x00	; 0
 db6:	60 e0       	ldi	r22, 0x00	; 0
 db8:	08 95       	ret

00000dba <__fp_mintl>:
 dba:	88 23       	and	r24, r24
 dbc:	71 f4       	brne	.+28     	; 0xdda <__fp_mintl+0x20>
 dbe:	77 23       	and	r23, r23
 dc0:	21 f0       	breq	.+8      	; 0xdca <__fp_mintl+0x10>
 dc2:	98 50       	subi	r25, 0x08	; 8
 dc4:	87 2b       	or	r24, r23
 dc6:	76 2f       	mov	r23, r22
 dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <__fp_mintl+0x1e>
 dca:	66 23       	and	r22, r22
 dcc:	11 f4       	brne	.+4      	; 0xdd2 <__fp_mintl+0x18>
 dce:	99 27       	eor	r25, r25
 dd0:	0d c0       	rjmp	.+26     	; 0xdec <__fp_mintl+0x32>
 dd2:	90 51       	subi	r25, 0x10	; 16
 dd4:	86 2b       	or	r24, r22
 dd6:	70 e0       	ldi	r23, 0x00	; 0
 dd8:	60 e0       	ldi	r22, 0x00	; 0
 dda:	2a f0       	brmi	.+10     	; 0xde6 <__fp_mintl+0x2c>
 ddc:	9a 95       	dec	r25
 dde:	66 0f       	add	r22, r22
 de0:	77 1f       	adc	r23, r23
 de2:	88 1f       	adc	r24, r24
 de4:	da f7       	brpl	.-10     	; 0xddc <__fp_mintl+0x22>
 de6:	88 0f       	add	r24, r24
 de8:	96 95       	lsr	r25
 dea:	87 95       	ror	r24
 dec:	97 f9       	bld	r25, 7
 dee:	08 95       	ret

00000df0 <__fp_mpack>:
 df0:	9f 3f       	cpi	r25, 0xFF	; 255
 df2:	31 f0       	breq	.+12     	; 0xe00 <__fp_mpack_finite+0xc>

00000df4 <__fp_mpack_finite>:
 df4:	91 50       	subi	r25, 0x01	; 1
 df6:	20 f4       	brcc	.+8      	; 0xe00 <__fp_mpack_finite+0xc>
 df8:	87 95       	ror	r24
 dfa:	77 95       	ror	r23
 dfc:	67 95       	ror	r22
 dfe:	b7 95       	ror	r27
 e00:	88 0f       	add	r24, r24
 e02:	91 1d       	adc	r25, r1
 e04:	96 95       	lsr	r25
 e06:	87 95       	ror	r24
 e08:	97 f9       	bld	r25, 7
 e0a:	08 95       	ret

00000e0c <__fp_nan>:
 e0c:	9f ef       	ldi	r25, 0xFF	; 255
 e0e:	80 ec       	ldi	r24, 0xC0	; 192
 e10:	08 95       	ret

00000e12 <__fp_pscA>:
 e12:	00 24       	eor	r0, r0
 e14:	0a 94       	dec	r0
 e16:	16 16       	cp	r1, r22
 e18:	17 06       	cpc	r1, r23
 e1a:	18 06       	cpc	r1, r24
 e1c:	09 06       	cpc	r0, r25
 e1e:	08 95       	ret

00000e20 <__fp_pscB>:
 e20:	00 24       	eor	r0, r0
 e22:	0a 94       	dec	r0
 e24:	12 16       	cp	r1, r18
 e26:	13 06       	cpc	r1, r19
 e28:	14 06       	cpc	r1, r20
 e2a:	05 06       	cpc	r0, r21
 e2c:	08 95       	ret

00000e2e <__fp_round>:
 e2e:	09 2e       	mov	r0, r25
 e30:	03 94       	inc	r0
 e32:	00 0c       	add	r0, r0
 e34:	11 f4       	brne	.+4      	; 0xe3a <__fp_round+0xc>
 e36:	88 23       	and	r24, r24
 e38:	52 f0       	brmi	.+20     	; 0xe4e <__fp_round+0x20>
 e3a:	bb 0f       	add	r27, r27
 e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fp_round+0x20>
 e3e:	bf 2b       	or	r27, r31
 e40:	11 f4       	brne	.+4      	; 0xe46 <__fp_round+0x18>
 e42:	60 ff       	sbrs	r22, 0
 e44:	04 c0       	rjmp	.+8      	; 0xe4e <__fp_round+0x20>
 e46:	6f 5f       	subi	r22, 0xFF	; 255
 e48:	7f 4f       	sbci	r23, 0xFF	; 255
 e4a:	8f 4f       	sbci	r24, 0xFF	; 255
 e4c:	9f 4f       	sbci	r25, 0xFF	; 255
 e4e:	08 95       	ret

00000e50 <__fp_split3>:
 e50:	57 fd       	sbrc	r21, 7
 e52:	90 58       	subi	r25, 0x80	; 128
 e54:	44 0f       	add	r20, r20
 e56:	55 1f       	adc	r21, r21
 e58:	59 f0       	breq	.+22     	; 0xe70 <__fp_splitA+0x10>
 e5a:	5f 3f       	cpi	r21, 0xFF	; 255
 e5c:	71 f0       	breq	.+28     	; 0xe7a <__fp_splitA+0x1a>
 e5e:	47 95       	ror	r20

00000e60 <__fp_splitA>:
 e60:	88 0f       	add	r24, r24
 e62:	97 fb       	bst	r25, 7
 e64:	99 1f       	adc	r25, r25
 e66:	61 f0       	breq	.+24     	; 0xe80 <__fp_splitA+0x20>
 e68:	9f 3f       	cpi	r25, 0xFF	; 255
 e6a:	79 f0       	breq	.+30     	; 0xe8a <__fp_splitA+0x2a>
 e6c:	87 95       	ror	r24
 e6e:	08 95       	ret
 e70:	12 16       	cp	r1, r18
 e72:	13 06       	cpc	r1, r19
 e74:	14 06       	cpc	r1, r20
 e76:	55 1f       	adc	r21, r21
 e78:	f2 cf       	rjmp	.-28     	; 0xe5e <__fp_split3+0xe>
 e7a:	46 95       	lsr	r20
 e7c:	f1 df       	rcall	.-30     	; 0xe60 <__fp_splitA>
 e7e:	08 c0       	rjmp	.+16     	; 0xe90 <__fp_splitA+0x30>
 e80:	16 16       	cp	r1, r22
 e82:	17 06       	cpc	r1, r23
 e84:	18 06       	cpc	r1, r24
 e86:	99 1f       	adc	r25, r25
 e88:	f1 cf       	rjmp	.-30     	; 0xe6c <__fp_splitA+0xc>
 e8a:	86 95       	lsr	r24
 e8c:	71 05       	cpc	r23, r1
 e8e:	61 05       	cpc	r22, r1
 e90:	08 94       	sec
 e92:	08 95       	ret

00000e94 <__fp_trunc>:
 e94:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_splitA>
 e98:	a0 f0       	brcs	.+40     	; 0xec2 <__fp_trunc+0x2e>
 e9a:	be e7       	ldi	r27, 0x7E	; 126
 e9c:	b9 17       	cp	r27, r25
 e9e:	88 f4       	brcc	.+34     	; 0xec2 <__fp_trunc+0x2e>
 ea0:	bb 27       	eor	r27, r27
 ea2:	9f 38       	cpi	r25, 0x8F	; 143
 ea4:	60 f4       	brcc	.+24     	; 0xebe <__fp_trunc+0x2a>
 ea6:	16 16       	cp	r1, r22
 ea8:	b1 1d       	adc	r27, r1
 eaa:	67 2f       	mov	r22, r23
 eac:	78 2f       	mov	r23, r24
 eae:	88 27       	eor	r24, r24
 eb0:	98 5f       	subi	r25, 0xF8	; 248
 eb2:	f7 cf       	rjmp	.-18     	; 0xea2 <__fp_trunc+0xe>
 eb4:	86 95       	lsr	r24
 eb6:	77 95       	ror	r23
 eb8:	67 95       	ror	r22
 eba:	b1 1d       	adc	r27, r1
 ebc:	93 95       	inc	r25
 ebe:	96 39       	cpi	r25, 0x96	; 150
 ec0:	c8 f3       	brcs	.-14     	; 0xeb4 <__fp_trunc+0x20>
 ec2:	08 95       	ret

00000ec4 <__fp_zero>:
 ec4:	e8 94       	clt

00000ec6 <__fp_szero>:
 ec6:	bb 27       	eor	r27, r27
 ec8:	66 27       	eor	r22, r22
 eca:	77 27       	eor	r23, r23
 ecc:	cb 01       	movw	r24, r22
 ece:	97 f9       	bld	r25, 7
 ed0:	08 95       	ret

00000ed2 <__gesf2>:
 ed2:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fp_cmp>
 ed6:	08 f4       	brcc	.+2      	; 0xeda <__gesf2+0x8>
 ed8:	8f ef       	ldi	r24, 0xFF	; 255
 eda:	08 95       	ret

00000edc <__tablejump2__>:
 edc:	ee 0f       	add	r30, r30
 ede:	ff 1f       	adc	r31, r31
 ee0:	05 90       	lpm	r0, Z+
 ee2:	f4 91       	lpm	r31, Z
 ee4:	e0 2d       	mov	r30, r0
 ee6:	09 94       	ijmp

00000ee8 <_exit>:
 ee8:	f8 94       	cli

00000eea <__stop_program>:
 eea:	ff cf       	rjmp	.-2      	; 0xeea <__stop_program>
